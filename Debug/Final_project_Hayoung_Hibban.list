
Final_project_Hayoung_Hibban.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002128  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a48  08005a48  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005a48  08005a48  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a48  08005a48  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000080  08005ad0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08005ad0  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5a7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e45  00000000  00000000  0002c64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0002f1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fca  00000000  00000000  0002fe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000feb8  00000000  00000000  00049dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009591d  00000000  00000000  00059c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef5af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003360  00000000  00000000  000ef600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003908 	.word	0x08003908

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08003908 	.word	0x08003908

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fe3c 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f8da 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f9d2 	bl	80005e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000244:	f000 f938 	bl	80004b8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000248:	f000 f976 	bl	8000538 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800024c:	4b5d      	ldr	r3, [pc, #372]	; (80003c4 <main+0x190>)
 800024e:	0018      	movs	r0, r3
 8000250:	f002 fc28 	bl	8002aa4 <HAL_TIM_Base_Start>
     HAL_GPIO_WritePin(GAS_PORT, GAS_PIN, GPIO_PIN_RESET);  // pull the GAS pin low
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	0099      	lsls	r1, r3, #2
 8000258:	2390      	movs	r3, #144	; 0x90
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2200      	movs	r2, #0
 800025e:	0018      	movs	r0, r3
 8000260:	f001 f8f9 	bl	8001456 <HAL_GPIO_WritePin>
     SSD1306_Init();
 8000264:	f000 fa2e 	bl	80006c4 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     while (1)
            {
              HAL_GPIO_WritePin(GAS_PORT, GAS_PIN, GPIO_PIN_SET);  // pull the GAS pin HIGH
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	0099      	lsls	r1, r3, #2
 800026c:	2390      	movs	r3, #144	; 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2201      	movs	r2, #1
 8000272:	0018      	movs	r0, r3
 8000274:	f001 f8ef 	bl	8001456 <HAL_GPIO_WritePin>
              __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000278:	4b52      	ldr	r3, [pc, #328]	; (80003c4 <main+0x190>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2200      	movs	r2, #0
 800027e:	625a      	str	r2, [r3, #36]	; 0x24
              while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	4b50      	ldr	r3, [pc, #320]	; (80003c4 <main+0x190>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000288:	2b09      	cmp	r3, #9
 800028a:	d9fa      	bls.n	8000282 <main+0x4e>
              HAL_GPIO_WritePin(GAS_PORT, GAS_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	0099      	lsls	r1, r3, #2
 8000290:	2390      	movs	r3, #144	; 0x90
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	2200      	movs	r2, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f001 f8dd 	bl	8001456 <HAL_GPIO_WritePin>

              pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800029c:	f000 fe64 	bl	8000f68 <HAL_GetTick>
 80002a0:	0002      	movs	r2, r0
 80002a2:	4b49      	ldr	r3, [pc, #292]	; (80003c8 <main+0x194>)
 80002a4:	601a      	str	r2, [r3, #0]
              // wait for the echo pin to go high
              while (!(HAL_GPIO_ReadPin (GAS_PORT, GAS_PIN)) && pMillis + 10 >  HAL_GetTick());
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	009a      	lsls	r2, r3, #2
 80002ac:	2390      	movs	r3, #144	; 0x90
 80002ae:	05db      	lsls	r3, r3, #23
 80002b0:	0011      	movs	r1, r2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f8b2 	bl	800141c <HAL_GPIO_ReadPin>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d108      	bne.n	80002ce <main+0x9a>
 80002bc:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <main+0x194>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	330a      	adds	r3, #10
 80002c2:	001c      	movs	r4, r3
 80002c4:	f000 fe50 	bl	8000f68 <HAL_GetTick>
 80002c8:	0003      	movs	r3, r0
 80002ca:	429c      	cmp	r4, r3
 80002cc:	d8ec      	bhi.n	80002a8 <main+0x74>
              Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80002ce:	4b3d      	ldr	r3, [pc, #244]	; (80003c4 <main+0x190>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002d4:	4b3d      	ldr	r3, [pc, #244]	; (80003cc <main+0x198>)
 80002d6:	601a      	str	r2, [r3, #0]

              pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80002d8:	f000 fe46 	bl	8000f68 <HAL_GetTick>
 80002dc:	0002      	movs	r2, r0
 80002de:	4b3a      	ldr	r3, [pc, #232]	; (80003c8 <main+0x194>)
 80002e0:	601a      	str	r2, [r3, #0]
              // wait for the echo pin to go low
              while ((HAL_GPIO_ReadPin (GAS_PORT, GAS_PIN)) && pMillis + 50 > HAL_GetTick());
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	009a      	lsls	r2, r3, #2
 80002e8:	2390      	movs	r3, #144	; 0x90
 80002ea:	05db      	lsls	r3, r3, #23
 80002ec:	0011      	movs	r1, r2
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 f894 	bl	800141c <HAL_GPIO_ReadPin>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d008      	beq.n	800030a <main+0xd6>
 80002f8:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <main+0x194>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3332      	adds	r3, #50	; 0x32
 80002fe:	001c      	movs	r4, r3
 8000300:	f000 fe32 	bl	8000f68 <HAL_GetTick>
 8000304:	0003      	movs	r3, r0
 8000306:	429c      	cmp	r4, r3
 8000308:	d8ec      	bhi.n	80002e4 <main+0xb0>
              Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 800030a:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <main+0x190>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <main+0x198>)
 8000312:	601a      	str	r2, [r3, #0]

              GAS = Value1/2;
 8000314:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <main+0x198>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	085b      	lsrs	r3, r3, #1
 800031a:	b29a      	uxth	r2, r3
 800031c:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <main+0x19c>)
 800031e:	801a      	strh	r2, [r3, #0]


              	 	 	 if (GAS < 6000)
 8000320:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <main+0x19c>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	4a2b      	ldr	r2, [pc, #172]	; (80003d4 <main+0x1a0>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d824      	bhi.n	8000374 <main+0x140>
                         {
                           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 800032a:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <main+0x1a4>)
 800032c:	2200      	movs	r2, #0
 800032e:	2102      	movs	r1, #2
 8000330:	0018      	movs	r0, r3
 8000332:	f001 f890 	bl	8001456 <HAL_GPIO_WritePin>
                           	   SSD1306_GotoXY (0, 0);
 8000336:	2100      	movs	r1, #0
 8000338:	2000      	movs	r0, #0
 800033a:	f000 fb43 	bl	80009c4 <SSD1306_GotoXY>
                                           SSD1306_Puts ("GAS:", &Font_11x18, 1);
 800033e:	4927      	ldr	r1, [pc, #156]	; (80003dc <main+0x1a8>)
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <main+0x1ac>)
 8000342:	2201      	movs	r2, #1
 8000344:	0018      	movs	r0, r3
 8000346:	f000 fbd7 	bl	8000af8 <SSD1306_Puts>
                                           sprintf(strCopy,"%d    ",GAS);
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <main+0x19c>)
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	001a      	movs	r2, r3
 8000350:	4924      	ldr	r1, [pc, #144]	; (80003e4 <main+0x1b0>)
 8000352:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <main+0x1b4>)
 8000354:	0018      	movs	r0, r3
 8000356:	f002 fe6d 	bl	8003034 <siprintf>
                                           SSD1306_GotoXY (0, 30);
 800035a:	211e      	movs	r1, #30
 800035c:	2000      	movs	r0, #0
 800035e:	f000 fb31 	bl	80009c4 <SSD1306_GotoXY>
                                           SSD1306_Puts (strCopy, &Font_16x26, 1);
 8000362:	4922      	ldr	r1, [pc, #136]	; (80003ec <main+0x1b8>)
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <main+0x1b4>)
 8000366:	2201      	movs	r2, #1
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fbc5 	bl	8000af8 <SSD1306_Puts>
                                           SSD1306_UpdateScreen();
 800036e:	f000 fa6d 	bl	800084c <SSD1306_UpdateScreen>
 8000372:	e023      	b.n	80003bc <main+0x188>
                         }

                         else
                         {
                           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <main+0x1a4>)
 8000376:	2201      	movs	r2, #1
 8000378:	2102      	movs	r1, #2
 800037a:	0018      	movs	r0, r3
 800037c:	f001 f86b 	bl	8001456 <HAL_GPIO_WritePin>
                           	   SSD1306_GotoXY (0, 0);
 8000380:	2100      	movs	r1, #0
 8000382:	2000      	movs	r0, #0
 8000384:	f000 fb1e 	bl	80009c4 <SSD1306_GotoXY>
                                           SSD1306_Puts ("GAS: Go Out", &Font_11x18, 1);
 8000388:	4914      	ldr	r1, [pc, #80]	; (80003dc <main+0x1a8>)
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <main+0x1bc>)
 800038c:	2201      	movs	r2, #1
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fbb2 	bl	8000af8 <SSD1306_Puts>
                                           sprintf(strCopy,"%d    ",GAS);
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <main+0x19c>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	001a      	movs	r2, r3
 800039a:	4912      	ldr	r1, [pc, #72]	; (80003e4 <main+0x1b0>)
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <main+0x1b4>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f002 fe48 	bl	8003034 <siprintf>
                                           SSD1306_GotoXY (0, 30);
 80003a4:	211e      	movs	r1, #30
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fb0c 	bl	80009c4 <SSD1306_GotoXY>
                                           SSD1306_Puts (strCopy, &Font_16x26, 1);
 80003ac:	490f      	ldr	r1, [pc, #60]	; (80003ec <main+0x1b8>)
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <main+0x1b4>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fba0 	bl	8000af8 <SSD1306_Puts>
                                           SSD1306_UpdateScreen();
 80003b8:	f000 fa48 	bl	800084c <SSD1306_UpdateScreen>
                         }


              HAL_Delay(50);
 80003bc:	2032      	movs	r0, #50	; 0x32
 80003be:	f000 fddd 	bl	8000f7c <HAL_Delay>
              HAL_GPIO_WritePin(GAS_PORT, GAS_PIN, GPIO_PIN_SET);  // pull the GAS pin HIGH
 80003c2:	e751      	b.n	8000268 <main+0x34>
 80003c4:	200000e8 	.word	0x200000e8
 80003c8:	20000130 	.word	0x20000130
 80003cc:	20000134 	.word	0x20000134
 80003d0:	20000138 	.word	0x20000138
 80003d4:	0000176f 	.word	0x0000176f
 80003d8:	48000400 	.word	0x48000400
 80003dc:	20000000 	.word	0x20000000
 80003e0:	08003920 	.word	0x08003920
 80003e4:	08003928 	.word	0x08003928
 80003e8:	2000013c 	.word	0x2000013c
 80003ec:	20000008 	.word	0x20000008
 80003f0:	08003930 	.word	0x08003930

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b099      	sub	sp, #100	; 0x64
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	242c      	movs	r4, #44	; 0x2c
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2334      	movs	r3, #52	; 0x34
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f002 fe0d 	bl	8003024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040a:	231c      	movs	r3, #28
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	0018      	movs	r0, r3
 8000410:	2310      	movs	r3, #16
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f002 fe05 	bl	8003024 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041a:	003b      	movs	r3, r7
 800041c:	0018      	movs	r0, r3
 800041e:	231c      	movs	r3, #28
 8000420:	001a      	movs	r2, r3
 8000422:	2100      	movs	r1, #0
 8000424:	f002 fdfe 	bl	8003024 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	0021      	movs	r1, r4
 800042a:	187b      	adds	r3, r7, r1
 800042c:	2202      	movs	r2, #2
 800042e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2201      	movs	r2, #1
 8000434:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2210      	movs	r2, #16
 800043a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2202      	movs	r2, #2
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	0212      	lsls	r2, r2, #8
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0352      	lsls	r2, r2, #13
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	187b      	adds	r3, r7, r1
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fcf4 	bl	8001e48 <HAL_RCC_OscConfig>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000464:	f000 f928 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	211c      	movs	r1, #28
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2207      	movs	r2, #7
 800046e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2202      	movs	r2, #2
 8000474:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2101      	movs	r1, #1
 8000486:	0018      	movs	r0, r3
 8000488:	f002 f864 	bl	8002554 <HAL_RCC_ClockConfig>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000490:	f000 f912 	bl	80006b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000494:	003b      	movs	r3, r7
 8000496:	2220      	movs	r2, #32
 8000498:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800049a:	003b      	movs	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a0:	003b      	movs	r3, r7
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 f9b0 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80004ac:	f000 f904 	bl	80006b8 <Error_Handler>
  }
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b019      	add	sp, #100	; 0x64
 80004b6:	bd90      	pop	{r4, r7, pc}

080004b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_I2C1_Init+0x74>)
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <MX_I2C1_Init+0x78>)
 80004c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_I2C1_Init+0x74>)
 80004c4:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <MX_I2C1_Init+0x7c>)
 80004c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_I2C1_Init+0x74>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_I2C1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_I2C1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_I2C1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_I2C1_Init+0x74>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 ffcb 	bl	8001490 <HAL_I2C_Init>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004fe:	f000 f8db 	bl	80006b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <MX_I2C1_Init+0x74>)
 8000504:	2100      	movs	r1, #0
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fc06 	bl	8001d18 <HAL_I2CEx_ConfigAnalogFilter>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000510:	f000 f8d2 	bl	80006b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <MX_I2C1_Init+0x74>)
 8000516:	2100      	movs	r1, #0
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fc49 	bl	8001db0 <HAL_I2CEx_ConfigDigitalFilter>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000522:	f000 f8c9 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000009c 	.word	0x2000009c
 8000530:	40005400 	.word	0x40005400
 8000534:	0000020b 	.word	0x0000020b

08000538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	2308      	movs	r3, #8
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2310      	movs	r3, #16
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f002 fd6b 	bl	8003024 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054e:	003b      	movs	r3, r7
 8000550:	0018      	movs	r0, r3
 8000552:	2308      	movs	r3, #8
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f002 fd64 	bl	8003024 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <MX_TIM1_Init+0xa4>)
 800055e:	4a20      	ldr	r2, [pc, #128]	; (80005e0 <MX_TIM1_Init+0xa8>)
 8000560:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_TIM1_Init+0xa4>)
 8000564:	222f      	movs	r2, #47	; 0x2f
 8000566:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_TIM1_Init+0xa4>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_TIM1_Init+0xa4>)
 8000570:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_TIM1_Init+0xac>)
 8000572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_TIM1_Init+0xa4>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_TIM1_Init+0xa4>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_TIM1_Init+0xa4>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_TIM1_Init+0xa4>)
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fa3b 	bl	8002a04 <HAL_TIM_Base_Init>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000592:	f000 f891 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000596:	2108      	movs	r1, #8
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	0152      	lsls	r2, r2, #5
 800059e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005a0:	187a      	adds	r2, r7, r1
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_TIM1_Init+0xa4>)
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f002 fac6 	bl	8002b38 <HAL_TIM_ConfigClockSource>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005b0:	f000 f882 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b4:	003b      	movs	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ba:	003b      	movs	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005c0:	003a      	movs	r2, r7
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_TIM1_Init+0xa4>)
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 fca4 	bl	8002f14 <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005d0:	f000 f872 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b006      	add	sp, #24
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000e8 	.word	0x200000e8
 80005e0:	40012c00 	.word	0x40012c00
 80005e4:	0000ffff 	.word	0x0000ffff

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b089      	sub	sp, #36	; 0x24
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	240c      	movs	r4, #12
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	0018      	movs	r0, r3
 80005f4:	2314      	movs	r3, #20
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f002 fd13 	bl	8003024 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	03c9      	lsls	r1, r1, #15
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	03db      	lsls	r3, r3, #15
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	02c9      	lsls	r1, r1, #11
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	02db      	lsls	r3, r3, #11
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_GPIO_Init+0xc8>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_GPIO_Init+0xc8>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_GPIO_Init+0xcc>)
 8000654:	2200      	movs	r2, #0
 8000656:	2102      	movs	r1, #2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fefc 	bl	8001456 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2202      	movs	r2, #2
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2201      	movs	r2, #1
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	193b      	adds	r3, r7, r4
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <MX_GPIO_Init+0xcc>)
 800067a:	0019      	movs	r1, r3
 800067c:	0010      	movs	r0, r2
 800067e:	f000 fd55 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000682:	0021      	movs	r1, r4
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	0092      	lsls	r2, r2, #2
 800068a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2203      	movs	r2, #3
 8000690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	187a      	adds	r2, r7, r1
 800069a:	2390      	movs	r3, #144	; 0x90
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fd43 	bl	800112c <HAL_GPIO_Init>

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b009      	add	sp, #36	; 0x24
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40021000 	.word	0x40021000
 80006b4:	48000400 	.word	0x48000400

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006ca:	f000 fa3b 	bl	8000b44 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80006ce:	4b5b      	ldr	r3, [pc, #364]	; (800083c <SSD1306_Init+0x178>)
 80006d0:	485b      	ldr	r0, [pc, #364]	; (8000840 <SSD1306_Init+0x17c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	2178      	movs	r1, #120	; 0x78
 80006d6:	f001 f879 	bl	80017cc <HAL_I2C_IsDeviceReady>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	e0a8      	b.n	8000834 <SSD1306_Init+0x170>
	}

	/* A little delay */
	uint32_t p = 2500;
 80006e2:	4b58      	ldr	r3, [pc, #352]	; (8000844 <SSD1306_Init+0x180>)
 80006e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006e6:	e002      	b.n	80006ee <SSD1306_Init+0x2a>
		p--;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f9      	bne.n	80006e8 <SSD1306_Init+0x24>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80006f4:	22ae      	movs	r2, #174	; 0xae
 80006f6:	2100      	movs	r1, #0
 80006f8:	2078      	movs	r0, #120	; 0x78
 80006fa:	f000 faa3 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80006fe:	2220      	movs	r2, #32
 8000700:	2100      	movs	r1, #0
 8000702:	2078      	movs	r0, #120	; 0x78
 8000704:	f000 fa9e 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000708:	2210      	movs	r2, #16
 800070a:	2100      	movs	r1, #0
 800070c:	2078      	movs	r0, #120	; 0x78
 800070e:	f000 fa99 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000712:	22b0      	movs	r2, #176	; 0xb0
 8000714:	2100      	movs	r1, #0
 8000716:	2078      	movs	r0, #120	; 0x78
 8000718:	f000 fa94 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800071c:	22c8      	movs	r2, #200	; 0xc8
 800071e:	2100      	movs	r1, #0
 8000720:	2078      	movs	r0, #120	; 0x78
 8000722:	f000 fa8f 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	; 0x78
 800072c:	f000 fa8a 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000730:	2210      	movs	r2, #16
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	; 0x78
 8000736:	f000 fa85 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800073a:	2240      	movs	r2, #64	; 0x40
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	; 0x78
 8000740:	f000 fa80 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000744:	2281      	movs	r2, #129	; 0x81
 8000746:	2100      	movs	r1, #0
 8000748:	2078      	movs	r0, #120	; 0x78
 800074a:	f000 fa7b 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800074e:	22ff      	movs	r2, #255	; 0xff
 8000750:	2100      	movs	r1, #0
 8000752:	2078      	movs	r0, #120	; 0x78
 8000754:	f000 fa76 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000758:	22a1      	movs	r2, #161	; 0xa1
 800075a:	2100      	movs	r1, #0
 800075c:	2078      	movs	r0, #120	; 0x78
 800075e:	f000 fa71 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000762:	22a6      	movs	r2, #166	; 0xa6
 8000764:	2100      	movs	r1, #0
 8000766:	2078      	movs	r0, #120	; 0x78
 8000768:	f000 fa6c 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800076c:	22a8      	movs	r2, #168	; 0xa8
 800076e:	2100      	movs	r1, #0
 8000770:	2078      	movs	r0, #120	; 0x78
 8000772:	f000 fa67 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000776:	223f      	movs	r2, #63	; 0x3f
 8000778:	2100      	movs	r1, #0
 800077a:	2078      	movs	r0, #120	; 0x78
 800077c:	f000 fa62 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000780:	22a4      	movs	r2, #164	; 0xa4
 8000782:	2100      	movs	r1, #0
 8000784:	2078      	movs	r0, #120	; 0x78
 8000786:	f000 fa5d 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800078a:	22d3      	movs	r2, #211	; 0xd3
 800078c:	2100      	movs	r1, #0
 800078e:	2078      	movs	r0, #120	; 0x78
 8000790:	f000 fa58 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2078      	movs	r0, #120	; 0x78
 800079a:	f000 fa53 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800079e:	22d5      	movs	r2, #213	; 0xd5
 80007a0:	2100      	movs	r1, #0
 80007a2:	2078      	movs	r0, #120	; 0x78
 80007a4:	f000 fa4e 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80007a8:	22f0      	movs	r2, #240	; 0xf0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2078      	movs	r0, #120	; 0x78
 80007ae:	f000 fa49 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80007b2:	22d9      	movs	r2, #217	; 0xd9
 80007b4:	2100      	movs	r1, #0
 80007b6:	2078      	movs	r0, #120	; 0x78
 80007b8:	f000 fa44 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80007bc:	2222      	movs	r2, #34	; 0x22
 80007be:	2100      	movs	r1, #0
 80007c0:	2078      	movs	r0, #120	; 0x78
 80007c2:	f000 fa3f 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80007c6:	22da      	movs	r2, #218	; 0xda
 80007c8:	2100      	movs	r1, #0
 80007ca:	2078      	movs	r0, #120	; 0x78
 80007cc:	f000 fa3a 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007d0:	2212      	movs	r2, #18
 80007d2:	2100      	movs	r1, #0
 80007d4:	2078      	movs	r0, #120	; 0x78
 80007d6:	f000 fa35 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80007da:	22db      	movs	r2, #219	; 0xdb
 80007dc:	2100      	movs	r1, #0
 80007de:	2078      	movs	r0, #120	; 0x78
 80007e0:	f000 fa30 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80007e4:	2220      	movs	r2, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	2078      	movs	r0, #120	; 0x78
 80007ea:	f000 fa2b 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80007ee:	228d      	movs	r2, #141	; 0x8d
 80007f0:	2100      	movs	r1, #0
 80007f2:	2078      	movs	r0, #120	; 0x78
 80007f4:	f000 fa26 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80007f8:	2214      	movs	r2, #20
 80007fa:	2100      	movs	r1, #0
 80007fc:	2078      	movs	r0, #120	; 0x78
 80007fe:	f000 fa21 	bl	8000c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000802:	22af      	movs	r2, #175	; 0xaf
 8000804:	2100      	movs	r1, #0
 8000806:	2078      	movs	r0, #120	; 0x78
 8000808:	f000 fa1c 	bl	8000c44 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800080c:	222e      	movs	r2, #46	; 0x2e
 800080e:	2100      	movs	r1, #0
 8000810:	2078      	movs	r0, #120	; 0x78
 8000812:	f000 fa17 	bl	8000c44 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f84c 	bl	80008b4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800081c:	f000 f816 	bl	800084c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <SSD1306_Init+0x184>)
 8000822:	2200      	movs	r2, #0
 8000824:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <SSD1306_Init+0x184>)
 8000828:	2200      	movs	r2, #0
 800082a:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <SSD1306_Init+0x184>)
 800082e:	2201      	movs	r2, #1
 8000830:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	0018      	movs	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}
 800083c:	00004e20 	.word	0x00004e20
 8000840:	2000009c 	.word	0x2000009c
 8000844:	000009c4 	.word	0x000009c4
 8000848:	2000054c 	.word	0x2000054c

0800084c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e021      	b.n	800089e <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3b50      	subs	r3, #80	; 0x50
 8000860:	b2db      	uxtb	r3, r3
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	2078      	movs	r0, #120	; 0x78
 8000868:	f000 f9ec 	bl	8000c44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	; 0x78
 8000872:	f000 f9e7 	bl	8000c44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000876:	2210      	movs	r2, #16
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	; 0x78
 800087c:	f000 f9e2 	bl	8000c44 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	01da      	lsls	r2, r3, #7
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <SSD1306_UpdateScreen+0x64>)
 8000888:	18d2      	adds	r2, r2, r3
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	2140      	movs	r1, #64	; 0x40
 800088e:	2078      	movs	r0, #120	; 0x78
 8000890:	f000 f96c 	bl	8000b6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	3201      	adds	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b07      	cmp	r3, #7
 80008a4:	d9d9      	bls.n	800085a <SSD1306_UpdateScreen+0xe>
	}
}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000014c 	.word	0x2000014c

080008b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0002      	movs	r2, r0
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <SSD1306_Fill+0x18>
 80008c8:	2300      	movs	r3, #0
 80008ca:	e000      	b.n	80008ce <SSD1306_Fill+0x1a>
 80008cc:	23ff      	movs	r3, #255	; 0xff
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	00d2      	lsls	r2, r2, #3
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <SSD1306_Fill+0x30>)
 80008d4:	0019      	movs	r1, r3
 80008d6:	f002 fba5 	bl	8003024 <memset>
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	2000014c 	.word	0x2000014c

080008e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0004      	movs	r4, r0
 80008f0:	0008      	movs	r0, r1
 80008f2:	0011      	movs	r1, r2
 80008f4:	1dbb      	adds	r3, r7, #6
 80008f6:	1c22      	adds	r2, r4, #0
 80008f8:	801a      	strh	r2, [r3, #0]
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	1c02      	adds	r2, r0, #0
 80008fe:	801a      	strh	r2, [r3, #0]
 8000900:	1cfb      	adds	r3, r7, #3
 8000902:	1c0a      	adds	r2, r1, #0
 8000904:	701a      	strb	r2, [r3, #0]
	if (
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2b7f      	cmp	r3, #127	; 0x7f
 800090c:	d852      	bhi.n	80009b4 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	2b3f      	cmp	r3, #63	; 0x3f
 8000914:	d84e      	bhi.n	80009b4 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <SSD1306_DrawPixel+0xd4>)
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d006      	beq.n	800092c <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 800091e:	1cfb      	adds	r3, r7, #3
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	425a      	negs	r2, r3
 8000924:	4153      	adcs	r3, r2
 8000926:	b2da      	uxtb	r2, r3
 8000928:	1cfb      	adds	r3, r7, #3
 800092a:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800092c:	1cfb      	adds	r3, r7, #3
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d11e      	bne.n	8000972 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	b298      	uxth	r0, r3
 8000940:	0003      	movs	r3, r0
 8000942:	01db      	lsls	r3, r3, #7
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <SSD1306_DrawPixel+0xd8>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	b25a      	sxtb	r2, r3
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2107      	movs	r1, #7
 8000952:	400b      	ands	r3, r1
 8000954:	2101      	movs	r1, #1
 8000956:	4099      	lsls	r1, r3
 8000958:	000b      	movs	r3, r1
 800095a:	b25b      	sxtb	r3, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	b259      	sxtb	r1, r3
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	0003      	movs	r3, r0
 8000966:	01db      	lsls	r3, r3, #7
 8000968:	18d3      	adds	r3, r2, r3
 800096a:	b2c9      	uxtb	r1, r1
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <SSD1306_DrawPixel+0xd8>)
 800096e:	54d1      	strb	r1, [r2, r3]
 8000970:	e021      	b.n	80009b6 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000972:	1dbb      	adds	r3, r7, #6
 8000974:	881a      	ldrh	r2, [r3, #0]
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	b298      	uxth	r0, r3
 800097e:	0003      	movs	r3, r0
 8000980:	01db      	lsls	r3, r3, #7
 8000982:	18d3      	adds	r3, r2, r3
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <SSD1306_DrawPixel+0xd8>)
 8000986:	5cd3      	ldrb	r3, [r2, r3]
 8000988:	b25b      	sxtb	r3, r3
 800098a:	1d3a      	adds	r2, r7, #4
 800098c:	8812      	ldrh	r2, [r2, #0]
 800098e:	2107      	movs	r1, #7
 8000990:	400a      	ands	r2, r1
 8000992:	2101      	movs	r1, #1
 8000994:	4091      	lsls	r1, r2
 8000996:	000a      	movs	r2, r1
 8000998:	b252      	sxtb	r2, r2
 800099a:	43d2      	mvns	r2, r2
 800099c:	b252      	sxtb	r2, r2
 800099e:	4013      	ands	r3, r2
 80009a0:	b259      	sxtb	r1, r3
 80009a2:	1dbb      	adds	r3, r7, #6
 80009a4:	881a      	ldrh	r2, [r3, #0]
 80009a6:	0003      	movs	r3, r0
 80009a8:	01db      	lsls	r3, r3, #7
 80009aa:	18d3      	adds	r3, r2, r3
 80009ac:	b2c9      	uxtb	r1, r1
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <SSD1306_DrawPixel+0xd8>)
 80009b0:	54d1      	strb	r1, [r2, r3]
 80009b2:	e000      	b.n	80009b6 <SSD1306_DrawPixel+0xce>
		return;
 80009b4:	46c0      	nop			; (mov r8, r8)
	}
}
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b003      	add	sp, #12
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	2000054c 	.word	0x2000054c
 80009c0:	2000014c 	.word	0x2000014c

080009c4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	0002      	movs	r2, r0
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	801a      	strh	r2, [r3, #0]
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	1c0a      	adds	r2, r1, #0
 80009d4:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SSD1306_GotoXY+0x2c>)
 80009d8:	1dba      	adds	r2, r7, #6
 80009da:	8812      	ldrh	r2, [r2, #0]
 80009dc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SSD1306_GotoXY+0x2c>)
 80009e0:	1d3a      	adds	r2, r7, #4
 80009e2:	8812      	ldrh	r2, [r2, #0]
 80009e4:	805a      	strh	r2, [r3, #2]
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	2000054c 	.word	0x2000054c

080009f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6039      	str	r1, [r7, #0]
 80009fc:	0011      	movs	r1, r2
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	1c02      	adds	r2, r0, #0
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	1c0a      	adds	r2, r1, #0
 8000a08:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <SSD1306_Putc+0x100>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	001a      	movs	r2, r3
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	18d3      	adds	r3, r2, r3
	if (
 8000a16:	2b7f      	cmp	r3, #127	; 0x7f
 8000a18:	dc07      	bgt.n	8000a2a <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <SSD1306_Putc+0x100>)
 8000a1c:	885b      	ldrh	r3, [r3, #2]
 8000a1e:	001a      	movs	r2, r3
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a26:	2b3f      	cmp	r3, #63	; 0x3f
 8000a28:	dd01      	ble.n	8000a2e <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e05e      	b.n	8000aec <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e04a      	b.n	8000aca <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	3b20      	subs	r3, #32
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	7849      	ldrb	r1, [r1, #1]
 8000a42:	434b      	muls	r3, r1
 8000a44:	0019      	movs	r1, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	18cb      	adds	r3, r1, r3
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	e02f      	b.n	8000ab8 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	4013      	ands	r3, r2
 8000a64:	d011      	beq.n	8000a8a <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <SSD1306_Putc+0x100>)
 8000a68:	881a      	ldrh	r2, [r3, #0]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	18d3      	adds	r3, r2, r3
 8000a70:	b298      	uxth	r0, r3
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <SSD1306_Putc+0x100>)
 8000a74:	885a      	ldrh	r2, [r3, #2]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	18d3      	adds	r3, r2, r3
 8000a7c:	b299      	uxth	r1, r3
 8000a7e:	1dbb      	adds	r3, r7, #6
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	001a      	movs	r2, r3
 8000a84:	f7ff ff30 	bl	80008e8 <SSD1306_DrawPixel>
 8000a88:	e013      	b.n	8000ab2 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <SSD1306_Putc+0x100>)
 8000a8c:	881a      	ldrh	r2, [r3, #0]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	18d3      	adds	r3, r2, r3
 8000a94:	b298      	uxth	r0, r3
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <SSD1306_Putc+0x100>)
 8000a98:	885a      	ldrh	r2, [r3, #2]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	b299      	uxth	r1, r3
 8000aa2:	1dbb      	adds	r3, r7, #6
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	425a      	negs	r2, r3
 8000aa8:	4153      	adcs	r3, r2
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	001a      	movs	r2, r3
 8000aae:	f7ff ff1b 	bl	80008e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	001a      	movs	r2, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d3c9      	bcc.n	8000a58 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	785b      	ldrb	r3, [r3, #1]
 8000ace:	001a      	movs	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d3ae      	bcc.n	8000a34 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <SSD1306_Putc+0x100>)
 8000ad8:	881a      	ldrh	r2, [r3, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <SSD1306_Putc+0x100>)
 8000ae6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b006      	add	sp, #24
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000054c 	.word	0x2000054c

08000af8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000b06:	e013      	b.n	8000b30 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	7818      	ldrb	r0, [r3, #0]
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	0019      	movs	r1, r3
 8000b14:	f7ff ff6e 	bl	80009f4 <SSD1306_Putc>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d002      	beq.n	8000b2a <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e008      	b.n	8000b3c <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e7      	bne.n	8000b08 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b004      	add	sp, #16
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <ssd1306_I2C_Init+0x24>)
 8000b4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b4e:	e002      	b.n	8000b56 <ssd1306_I2C_Init+0x12>
		p--;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f9      	bne.n	8000b50 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	0003d090 	.word	0x0003d090

08000b6c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b0c6      	sub	sp, #280	; 0x118
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	0004      	movs	r4, r0
 8000b74:	0008      	movs	r0, r1
 8000b76:	603a      	str	r2, [r7, #0]
 8000b78:	0019      	movs	r1, r3
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <ssd1306_I2C_WriteMulti+0xc4>)
 8000b7c:	2588      	movs	r5, #136	; 0x88
 8000b7e:	006d      	lsls	r5, r5, #1
 8000b80:	195b      	adds	r3, r3, r5
 8000b82:	19db      	adds	r3, r3, r7
 8000b84:	1c22      	adds	r2, r4, #0
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b8a:	002c      	movs	r4, r5
 8000b8c:	191b      	adds	r3, r3, r4
 8000b8e:	19db      	adds	r3, r3, r7
 8000b90:	1c02      	adds	r2, r0, #0
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <ssd1306_I2C_WriteMulti+0xcc>)
 8000b96:	0020      	movs	r0, r4
 8000b98:	181b      	adds	r3, r3, r0
 8000b9a:	19db      	adds	r3, r3, r7
 8000b9c:	1c0a      	adds	r2, r1, #0
 8000b9e:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <ssd1306_I2C_WriteMulti+0xd0>)
 8000ba2:	181b      	adds	r3, r3, r0
 8000ba4:	19db      	adds	r3, r3, r7
 8000ba6:	4a23      	ldr	r2, [pc, #140]	; (8000c34 <ssd1306_I2C_WriteMulti+0xc8>)
 8000ba8:	1812      	adds	r2, r2, r0
 8000baa:	19d2      	adds	r2, r2, r7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	33ff      	adds	r3, #255	; 0xff
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e014      	b.n	8000be6 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	30ff      	adds	r0, #255	; 0xff
 8000bc0:	183b      	adds	r3, r7, r0
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	18d2      	adds	r2, r2, r3
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	7811      	ldrb	r1, [r2, #0]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <ssd1306_I2C_WriteMulti+0xd0>)
 8000bd2:	2488      	movs	r4, #136	; 0x88
 8000bd4:	0064      	lsls	r4, r4, #1
 8000bd6:	1912      	adds	r2, r2, r4
 8000bd8:	19d2      	adds	r2, r2, r7
 8000bda:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000bdc:	183b      	adds	r3, r7, r0
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	183b      	adds	r3, r7, r0
 8000be2:	3201      	adds	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	2310      	movs	r3, #16
 8000be8:	33ff      	adds	r3, #255	; 0xff
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <ssd1306_I2C_WriteMulti+0xcc>)
 8000bf2:	2188      	movs	r1, #136	; 0x88
 8000bf4:	0049      	lsls	r1, r1, #1
 8000bf6:	1852      	adds	r2, r2, r1
 8000bf8:	19d2      	adds	r2, r2, r7
 8000bfa:	8812      	ldrh	r2, [r2, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8dd      	bhi.n	8000bbc <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <ssd1306_I2C_WriteMulti+0xc4>)
 8000c02:	000a      	movs	r2, r1
 8000c04:	189b      	adds	r3, r3, r2
 8000c06:	19db      	adds	r3, r3, r7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <ssd1306_I2C_WriteMulti+0xcc>)
 8000c0e:	189b      	adds	r3, r3, r2
 8000c10:	19db      	adds	r3, r3, r7
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	220c      	movs	r2, #12
 8000c1a:	18ba      	adds	r2, r7, r2
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <ssd1306_I2C_WriteMulti+0xd4>)
 8000c1e:	240a      	movs	r4, #10
 8000c20:	9400      	str	r4, [sp, #0]
 8000c22:	f000 fccb 	bl	80015bc <HAL_I2C_Master_Transmit>
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b044      	add	sp, #272	; 0x110
 8000c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	fffffef7 	.word	0xfffffef7
 8000c34:	fffffef6 	.word	0xfffffef6
 8000c38:	fffffef4 	.word	0xfffffef4
 8000c3c:	fffffefc 	.word	0xfffffefc
 8000c40:	2000009c 	.word	0x2000009c

08000c44 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	0004      	movs	r4, r0
 8000c4c:	0008      	movs	r0, r1
 8000c4e:	0011      	movs	r1, r2
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	1c22      	adds	r2, r4, #0
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	1dbb      	adds	r3, r7, #6
 8000c58:	1c02      	adds	r2, r0, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	1d7b      	adds	r3, r7, #5
 8000c5e:	1c0a      	adds	r2, r1, #0
 8000c60:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000c62:	200c      	movs	r0, #12
 8000c64:	183b      	adds	r3, r7, r0
 8000c66:	1dba      	adds	r2, r7, #6
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000c6c:	183b      	adds	r3, r7, r0
 8000c6e:	1d7a      	adds	r2, r7, #5
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b299      	uxth	r1, r3
 8000c7a:	183a      	adds	r2, r7, r0
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <ssd1306_I2C_Write+0x4c>)
 8000c7e:	230a      	movs	r3, #10
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2302      	movs	r3, #2
 8000c84:	f000 fc9a 	bl	80015bc <HAL_I2C_Master_Transmit>
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b005      	add	sp, #20
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	2000009c 	.word	0x2000009c

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	699a      	ldr	r2, [r3, #24]
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	619a      	str	r2, [r3, #24]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	69da      	ldr	r2, [r3, #28]
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	0549      	lsls	r1, r1, #21
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	61da      	str	r2, [r3, #28]
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_MspInit+0x44>)
 8000cc2:	69da      	ldr	r2, [r3, #28]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	055b      	lsls	r3, r3, #21
 8000cc8:	4013      	ands	r3, r2
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	2414      	movs	r4, #20
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2314      	movs	r3, #20
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f002 f998 	bl	8003024 <memset>
  if(hi2c->Instance==I2C1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <HAL_I2C_MspInit+0x90>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d131      	bne.n	8000d62 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_I2C_MspInit+0x94>)
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_I2C_MspInit+0x94>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	02c9      	lsls	r1, r1, #11
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_I2C_MspInit+0x94>)
 8000d0e:	695a      	ldr	r2, [r3, #20]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	02db      	lsls	r3, r3, #11
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1a:	0021      	movs	r1, r4
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	22c0      	movs	r2, #192	; 0xc0
 8000d20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2212      	movs	r2, #18
 8000d26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2203      	movs	r2, #3
 8000d32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_I2C_MspInit+0x98>)
 8000d3e:	0019      	movs	r1, r3
 8000d40:	0010      	movs	r0, r2
 8000d42:	f000 f9f3 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_I2C_MspInit+0x94>)
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_I2C_MspInit+0x94>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0389      	lsls	r1, r1, #14
 8000d50:	430a      	orrs	r2, r1
 8000d52:	61da      	str	r2, [r3, #28]
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0x94>)
 8000d56:	69da      	ldr	r2, [r3, #28]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	039b      	lsls	r3, r3, #14
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b00b      	add	sp, #44	; 0x2c
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48000400 	.word	0x48000400

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10d      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	0109      	lsls	r1, r1, #4
 8000d94:	430a      	orrs	r2, r1
 8000d96:	619a      	str	r2, [r3, #24]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d9a:	699a      	ldr	r2, [r3, #24]
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	40021000 	.word	0x40021000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8b2 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	18d3      	adds	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f002 f8da 	bl	8002fd0 <__errno>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	18d2      	adds	r2, r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20004000 	.word	0x20004000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	20000554 	.word	0x20000554
 8000e50:	20000570 	.word	0x20000570

08000e54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e8a:	f7ff ffe3 	bl	8000e54 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e8e:	f002 f8a5 	bl	8002fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff f9cf 	bl	8000234 <main>

08000e96 <LoopForever>:

LoopForever:
    b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   r0, =_estack
 8000e98:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ea4:	08005a50 	.word	0x08005a50
  ldr r2, =_sbss
 8000ea8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000eac:	2000056c 	.word	0x2000056c

08000eb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_COMP_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_Init+0x24>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_Init+0x24>)
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f000 f809 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eca:	f7ff fee3 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_InitTick+0x5c>)
 8000ee6:	681c      	ldr	r4, [r3, #0]
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_InitTick+0x60>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	0019      	movs	r1, r3
 8000eee:	23fa      	movs	r3, #250	; 0xfa
 8000ef0:	0098      	lsls	r0, r3, #2
 8000ef2:	f7ff f913 	bl	800011c <__udivsi3>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0020      	movs	r0, r4
 8000efc:	f7ff f90e 	bl	800011c <__udivsi3>
 8000f00:	0003      	movs	r3, r0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 f905 	bl	8001112 <HAL_SYSTICK_Config>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e00f      	b.n	8000f30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d80b      	bhi.n	8000f2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	425b      	negs	r3, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 f8e2 	bl	80010e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_InitTick+0x64>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b003      	add	sp, #12
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	20000010 	.word	0x20000010
 8000f3c:	20000018 	.word	0x20000018
 8000f40:	20000014 	.word	0x20000014

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	18d2      	adds	r2, r2, r3
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_IncTick+0x20>)
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	20000018 	.word	0x20000018
 8000f64:	20000558 	.word	0x20000558

08000f68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	20000558 	.word	0x20000558

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff0 	bl	8000f68 <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3301      	adds	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	189b      	adds	r3, r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	f7ff ffe0 	bl	8000f68 <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b004      	add	sp, #16
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	20000018 	.word	0x20000018

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	0002      	movs	r2, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd8:	d828      	bhi.n	800102c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fda:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <__NVIC_SetPriority+0xd4>)
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	33c0      	adds	r3, #192	; 0xc0
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	589b      	ldr	r3, [r3, r2]
 8000fea:	1dfa      	adds	r2, r7, #7
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	0011      	movs	r1, r2
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	00d2      	lsls	r2, r2, #3
 8000ff6:	21ff      	movs	r1, #255	; 0xff
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	43d2      	mvns	r2, r2
 8000ffe:	401a      	ands	r2, r3
 8001000:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	019b      	lsls	r3, r3, #6
 8001006:	22ff      	movs	r2, #255	; 0xff
 8001008:	401a      	ands	r2, r3
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	0018      	movs	r0, r3
 8001010:	2303      	movs	r3, #3
 8001012:	4003      	ands	r3, r0
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001018:	481f      	ldr	r0, [pc, #124]	; (8001098 <__NVIC_SetPriority+0xd4>)
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	430a      	orrs	r2, r1
 8001024:	33c0      	adds	r3, #192	; 0xc0
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800102a:	e031      	b.n	8001090 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <__NVIC_SetPriority+0xd8>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0019      	movs	r1, r3
 8001034:	230f      	movs	r3, #15
 8001036:	400b      	ands	r3, r1
 8001038:	3b08      	subs	r3, #8
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3306      	adds	r3, #6
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1dfa      	adds	r2, r7, #7
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	0011      	movs	r1, r2
 800104c:	2203      	movs	r2, #3
 800104e:	400a      	ands	r2, r1
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	21ff      	movs	r1, #255	; 0xff
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	43d2      	mvns	r2, r2
 800105a:	401a      	ands	r2, r3
 800105c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	22ff      	movs	r2, #255	; 0xff
 8001064:	401a      	ands	r2, r3
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	2303      	movs	r3, #3
 800106e:	4003      	ands	r3, r0
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <__NVIC_SetPriority+0xd8>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	001c      	movs	r4, r3
 800107c:	230f      	movs	r3, #15
 800107e:	4023      	ands	r3, r4
 8001080:	3b08      	subs	r3, #8
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	430a      	orrs	r2, r1
 8001086:	3306      	adds	r3, #6
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	18c3      	adds	r3, r0, r3
 800108c:	3304      	adds	r3, #4
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b003      	add	sp, #12
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	045b      	lsls	r3, r3, #17
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d301      	bcc.n	80010b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b4:	2301      	movs	r3, #1
 80010b6:	e010      	b.n	80010da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <SysTick_Config+0x44>)
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	3a01      	subs	r2, #1
 80010be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c0:	2301      	movs	r3, #1
 80010c2:	425b      	negs	r3, r3
 80010c4:	2103      	movs	r1, #3
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff ff7c 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SysTick_Config+0x44>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <SysTick_Config+0x44>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	210f      	movs	r1, #15
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	1c02      	adds	r2, r0, #0
 80010f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff ffbf 	bl	80010a0 <SysTick_Config>
 8001122:	0003      	movs	r3, r0
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b002      	add	sp, #8
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e155      	b.n	80013e8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d100      	bne.n	8001154 <HAL_GPIO_Init+0x28>
 8001152:	e146      	b.n	80013e2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001168:	2b02      	cmp	r3, #2
 800116a:	d130      	bne.n	80011ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	409a      	lsls	r2, r3
 800118e:	0013      	movs	r3, r2
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	2201      	movs	r2, #1
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d017      	beq.n	800120a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	43da      	mvns	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	0013      	movs	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	4013      	ands	r3, r2
 8001212:	2b02      	cmp	r3, #2
 8001214:	d123      	bne.n	800125e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	58d3      	ldr	r3, [r2, r3]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2207      	movs	r2, #7
 8001228:	4013      	ands	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2107      	movs	r1, #7
 8001242:	400b      	ands	r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	6939      	ldr	r1, [r7, #16]
 800125c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2203      	movs	r2, #3
 800127c:	401a      	ands	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	23c0      	movs	r3, #192	; 0xc0
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_GPIO_Init+0x174>
 800129e:	e0a0      	b.n	80013e2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b57      	ldr	r3, [pc, #348]	; (8001400 <HAL_GPIO_Init+0x2d4>)
 80012a2:	699a      	ldr	r2, [r3, #24]
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_GPIO_Init+0x2d4>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	619a      	str	r2, [r3, #24]
 80012ac:	4b54      	ldr	r3, [pc, #336]	; (8001400 <HAL_GPIO_Init+0x2d4>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4013      	ands	r3, r2
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b8:	4a52      	ldr	r2, [pc, #328]	; (8001404 <HAL_GPIO_Init+0x2d8>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	589b      	ldr	r3, [r3, r2]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2203      	movs	r2, #3
 80012ca:	4013      	ands	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	2390      	movs	r3, #144	; 0x90
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x1ee>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x1ea>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a46      	ldr	r2, [pc, #280]	; (800140c <HAL_GPIO_Init+0x2e0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x1e6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a45      	ldr	r2, [pc, #276]	; (8001410 <HAL_GPIO_Init+0x2e4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x1e2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a44      	ldr	r2, [pc, #272]	; (8001414 <HAL_GPIO_Init+0x2e8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x1de>
 8001306:	2304      	movs	r3, #4
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x1f0>
 800130a:	2305      	movs	r3, #5
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x1f0>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x1f0>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x1f0>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x1f0>
 800131a:	2300      	movs	r3, #0
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	2103      	movs	r1, #3
 8001320:	400a      	ands	r2, r1
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <HAL_GPIO_Init+0x2d8>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	025b      	lsls	r3, r3, #9
 8001352:	4013      	ands	r3, r2
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43da      	mvns	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	035b      	lsls	r3, r3, #13
 80013a6:	4013      	ands	r3, r2
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	039b      	lsls	r3, r3, #14
 80013d0:	4013      	ands	r3, r2
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	40da      	lsrs	r2, r3
 80013f0:	1e13      	subs	r3, r2, #0
 80013f2:	d000      	beq.n	80013f6 <HAL_GPIO_Init+0x2ca>
 80013f4:	e6a2      	b.n	800113c <HAL_GPIO_Init+0x10>
  } 
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b006      	add	sp, #24
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000
 8001408:	48000400 	.word	0x48000400
 800140c:	48000800 	.word	0x48000800
 8001410:	48000c00 	.word	0x48000c00
 8001414:	48001000 	.word	0x48001000
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	000a      	movs	r2, r1
 8001426:	1cbb      	adds	r3, r7, #2
 8001428:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	1cba      	adds	r2, r7, #2
 8001430:	8812      	ldrh	r2, [r2, #0]
 8001432:	4013      	ands	r3, r2
 8001434:	d004      	beq.n	8001440 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001436:	230f      	movs	r3, #15
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e003      	b.n	8001448 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001440:	230f      	movs	r3, #15
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001448:	230f      	movs	r3, #15
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	781b      	ldrb	r3, [r3, #0]
  }
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	0008      	movs	r0, r1
 8001460:	0011      	movs	r1, r2
 8001462:	1cbb      	adds	r3, r7, #2
 8001464:	1c02      	adds	r2, r0, #0
 8001466:	801a      	strh	r2, [r3, #0]
 8001468:	1c7b      	adds	r3, r7, #1
 800146a:	1c0a      	adds	r2, r1, #0
 800146c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146e:	1c7b      	adds	r3, r7, #1
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	1cbb      	adds	r3, r7, #2
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147e:	e003      	b.n	8001488 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001480:	1cbb      	adds	r3, r7, #2
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e082      	b.n	80015a8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2241      	movs	r2, #65	; 0x41
 80014a6:	5c9b      	ldrb	r3, [r3, r2]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fc0f 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2241      	movs	r2, #65	; 0x41
 80014c2:	2124      	movs	r1, #36	; 0x24
 80014c4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	438a      	bics	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4934      	ldr	r1, [pc, #208]	; (80015b0 <HAL_I2C_Init+0x120>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4931      	ldr	r1, [pc, #196]	; (80015b4 <HAL_I2C_Init+0x124>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d108      	bne.n	800150e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0209      	lsls	r1, r1, #8
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e007      	b.n	800151e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2184      	movs	r1, #132	; 0x84
 8001518:	0209      	lsls	r1, r1, #8
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d104      	bne.n	8001530 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	491f      	ldr	r1, [pc, #124]	; (80015b8 <HAL_I2C_Init+0x128>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	491a      	ldr	r1, [pc, #104]	; (80015b4 <HAL_I2C_Init+0x124>)
 800154c:	400a      	ands	r2, r1
 800154e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	431a      	orrs	r2, r3
 800155a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69d9      	ldr	r1, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2241      	movs	r2, #65	; 0x41
 8001594:	2120      	movs	r1, #32
 8001596:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2242      	movs	r2, #66	; 0x42
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	f0ffffff 	.word	0xf0ffffff
 80015b4:	ffff7fff 	.word	0xffff7fff
 80015b8:	02008000 	.word	0x02008000

080015bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	0008      	movs	r0, r1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	0019      	movs	r1, r3
 80015ca:	230a      	movs	r3, #10
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	1c02      	adds	r2, r0, #0
 80015d0:	801a      	strh	r2, [r3, #0]
 80015d2:	2308      	movs	r3, #8
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	1c0a      	adds	r2, r1, #0
 80015d8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2241      	movs	r2, #65	; 0x41
 80015de:	5c9b      	ldrb	r3, [r3, r2]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	d000      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0x2c>
 80015e6:	e0e7      	b.n	80017b8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_I2C_Master_Transmit+0x3a>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e0e1      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2240      	movs	r2, #64	; 0x40
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015fe:	f7ff fcb3 	bl	8000f68 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	0219      	lsls	r1, r3, #8
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2319      	movs	r3, #25
 8001612:	2201      	movs	r2, #1
 8001614:	f000 fa16 	bl	8001a44 <I2C_WaitOnFlagUntilTimeout>
 8001618:	1e03      	subs	r3, r0, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0cc      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2241      	movs	r2, #65	; 0x41
 8001624:	2121      	movs	r1, #33	; 0x21
 8001626:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2242      	movs	r2, #66	; 0x42
 800162c:	2110      	movs	r1, #16
 800162e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2208      	movs	r2, #8
 8001640:	18ba      	adds	r2, r7, r2
 8001642:	8812      	ldrh	r2, [r2, #0]
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	2bff      	cmp	r3, #255	; 0xff
 8001654:	d911      	bls.n	800167a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	b2da      	uxtb	r2, r3
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	045c      	lsls	r4, r3, #17
 8001666:	230a      	movs	r3, #10
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	8819      	ldrh	r1, [r3, #0]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_I2C_Master_Transmit+0x208>)
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	0023      	movs	r3, r4
 8001674:	f000 fb1a 	bl	8001cac <I2C_TransferConfig>
 8001678:	e075      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	b2da      	uxtb	r2, r3
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	049c      	lsls	r4, r3, #18
 800168e:	230a      	movs	r3, #10
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	8819      	ldrh	r1, [r3, #0]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <HAL_I2C_Master_Transmit+0x208>)
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	0023      	movs	r3, r4
 800169c:	f000 fb06 	bl	8001cac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016a0:	e061      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 fa0a 	bl	8001ac2 <I2C_WaitOnTXISFlagUntilTimeout>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e081      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	3b01      	subs	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d03a      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d136      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	0013      	movs	r3, r2
 8001702:	2200      	movs	r2, #0
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	f000 f99d 	bl	8001a44 <I2C_WaitOnFlagUntilTimeout>
 800170a:	1e03      	subs	r3, r0, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e053      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	2bff      	cmp	r3, #255	; 0xff
 800171a:	d911      	bls.n	8001740 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	22ff      	movs	r2, #255	; 0xff
 8001720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	b2da      	uxtb	r2, r3
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	045c      	lsls	r4, r3, #17
 800172c:	230a      	movs	r3, #10
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	8819      	ldrh	r1, [r3, #0]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	0023      	movs	r3, r4
 800173a:	f000 fab7 	bl	8001cac <I2C_TransferConfig>
 800173e:	e012      	b.n	8001766 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	b2da      	uxtb	r2, r3
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	049c      	lsls	r4, r3, #18
 8001754:	230a      	movs	r3, #10
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	8819      	ldrh	r1, [r3, #0]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	0023      	movs	r3, r4
 8001762:	f000 faa3 	bl	8001cac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d198      	bne.n	80016a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	0018      	movs	r0, r3
 8001778:	f000 f9e2 	bl	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e01a      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2220      	movs	r2, #32
 800178a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	490c      	ldr	r1, [pc, #48]	; (80017c8 <HAL_I2C_Master_Transmit+0x20c>)
 8001798:	400a      	ands	r2, r1
 800179a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2241      	movs	r2, #65	; 0x41
 80017a0:	2120      	movs	r1, #32
 80017a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2242      	movs	r2, #66	; 0x42
 80017a8:	2100      	movs	r1, #0
 80017aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80017b8:	2302      	movs	r3, #2
  }
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b007      	add	sp, #28
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	80002000 	.word	0x80002000
 80017c8:	fe00e800 	.word	0xfe00e800

080017cc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	230a      	movs	r3, #10
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	1c0a      	adds	r2, r1, #0
 80017de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2241      	movs	r2, #65	; 0x41
 80017e8:	5c9b      	ldrb	r3, [r3, r2]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d000      	beq.n	80017f2 <HAL_I2C_IsDeviceReady+0x26>
 80017f0:	e0fe      	b.n	80019f0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	401a      	ands	r2, r3
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	429a      	cmp	r2, r3
 8001804:	d101      	bne.n	800180a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001806:	2302      	movs	r3, #2
 8001808:	e0f3      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	5c9b      	ldrb	r3, [r3, r2]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_I2C_IsDeviceReady+0x4c>
 8001814:	2302      	movs	r3, #2
 8001816:	e0ec      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	2101      	movs	r1, #1
 800181e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2241      	movs	r2, #65	; 0x41
 8001824:	2124      	movs	r1, #36	; 0x24
 8001826:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_I2C_IsDeviceReady+0x7a>
 8001836:	230a      	movs	r3, #10
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	059b      	lsls	r3, r3, #22
 800183e:	0d9b      	lsrs	r3, r3, #22
 8001840:	4a6e      	ldr	r2, [pc, #440]	; (80019fc <HAL_I2C_IsDeviceReady+0x230>)
 8001842:	431a      	orrs	r2, r3
 8001844:	e007      	b.n	8001856 <HAL_I2C_IsDeviceReady+0x8a>
 8001846:	230a      	movs	r3, #10
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	059b      	lsls	r3, r3, #22
 800184e:	0d9b      	lsrs	r3, r3, #22
 8001850:	22a0      	movs	r2, #160	; 0xa0
 8001852:	0192      	lsls	r2, r2, #6
 8001854:	431a      	orrs	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800185c:	f7ff fb84 	bl	8000f68 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2220      	movs	r2, #32
 800186c:	4013      	ands	r3, r2
 800186e:	3b20      	subs	r3, #32
 8001870:	425a      	negs	r2, r3
 8001872:	4153      	adcs	r3, r2
 8001874:	b2da      	uxtb	r2, r3
 8001876:	231f      	movs	r3, #31
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2210      	movs	r2, #16
 8001884:	4013      	ands	r3, r2
 8001886:	3b10      	subs	r3, #16
 8001888:	425a      	negs	r2, r3
 800188a:	4153      	adcs	r3, r2
 800188c:	b2da      	uxtb	r2, r3
 800188e:	231e      	movs	r3, #30
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001894:	e035      	b.n	8001902 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	d01a      	beq.n	80018d2 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800189c:	f7ff fb64 	bl	8000f68 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d302      	bcc.n	80018b2 <HAL_I2C_IsDeviceReady+0xe6>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2241      	movs	r2, #65	; 0x41
 80018b6:	2120      	movs	r1, #32
 80018b8:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	2220      	movs	r2, #32
 80018c0:	431a      	orrs	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	2100      	movs	r1, #0
 80018cc:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e08f      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2220      	movs	r2, #32
 80018da:	4013      	ands	r3, r2
 80018dc:	3b20      	subs	r3, #32
 80018de:	425a      	negs	r2, r3
 80018e0:	4153      	adcs	r3, r2
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	231f      	movs	r3, #31
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2210      	movs	r2, #16
 80018f2:	4013      	ands	r3, r2
 80018f4:	3b10      	subs	r3, #16
 80018f6:	425a      	negs	r2, r3
 80018f8:	4153      	adcs	r3, r2
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	231e      	movs	r3, #30
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001902:	231f      	movs	r3, #31
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d104      	bne.n	8001916 <HAL_I2C_IsDeviceReady+0x14a>
 800190c:	231e      	movs	r3, #30
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0bf      	beq.n	8001896 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2210      	movs	r2, #16
 800191e:	4013      	ands	r3, r2
 8001920:	2b10      	cmp	r3, #16
 8001922:	d01a      	beq.n	800195a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	0013      	movs	r3, r2
 800192e:	2200      	movs	r2, #0
 8001930:	2120      	movs	r1, #32
 8001932:	f000 f887 	bl	8001a44 <I2C_WaitOnFlagUntilTimeout>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e059      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2241      	movs	r2, #65	; 0x41
 800194a:	2120      	movs	r1, #32
 800194c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2240      	movs	r2, #64	; 0x40
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e04b      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	0013      	movs	r3, r2
 8001964:	2200      	movs	r2, #0
 8001966:	2120      	movs	r1, #32
 8001968:	f000 f86c 	bl	8001a44 <I2C_WaitOnFlagUntilTimeout>
 800196c:	1e03      	subs	r3, r0, #0
 800196e:	d001      	beq.n	8001974 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e03e      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2210      	movs	r2, #16
 800197a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2220      	movs	r2, #32
 8001982:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d119      	bne.n	80019c0 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	01c9      	lsls	r1, r1, #7
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	0013      	movs	r3, r2
 80019a8:	2200      	movs	r2, #0
 80019aa:	2120      	movs	r1, #32
 80019ac:	f000 f84a 	bl	8001a44 <I2C_WaitOnFlagUntilTimeout>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e01c      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2220      	movs	r2, #32
 80019be:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d900      	bls.n	80019d0 <HAL_I2C_IsDeviceReady+0x204>
 80019ce:	e72e      	b.n	800182e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2241      	movs	r2, #65	; 0x41
 80019d4:	2120      	movs	r1, #32
 80019d6:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	2220      	movs	r2, #32
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80019f0:	2302      	movs	r3, #2
  }
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b008      	add	sp, #32
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	02002000 	.word	0x02002000

08001a00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d103      	bne.n	8001a1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d007      	beq.n	8001a3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2101      	movs	r1, #1
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	619a      	str	r2, [r3, #24]
  }
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a54:	e021      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	d01e      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5c:	f7ff fa84 	bl	8000f68 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d302      	bcc.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d113      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	2220      	movs	r2, #32
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2241      	movs	r2, #65	; 0x41
 8001a82:	2120      	movs	r1, #32
 8001a84:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2242      	movs	r2, #66	; 0x42
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2240      	movs	r2, #64	; 0x40
 8001a92:	2100      	movs	r1, #0
 8001a94:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	425a      	negs	r2, r3
 8001aaa:	4153      	adcs	r3, r2
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	001a      	movs	r2, r3
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d0ce      	beq.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ace:	e02b      	b.n	8001b28 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 f86e 	bl	8001bb8 <I2C_IsAcknowledgeFailed>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d001      	beq.n	8001ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e029      	b.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	d01e      	beq.n	8001b28 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7ff fa3d 	bl	8000f68 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d113      	bne.n	8001b28 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	2220      	movs	r2, #32
 8001b06:	431a      	orrs	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2241      	movs	r2, #65	; 0x41
 8001b10:	2120      	movs	r1, #32
 8001b12:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2242      	movs	r2, #66	; 0x42
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2240      	movs	r2, #64	; 0x40
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e007      	b.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d1cc      	bne.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b004      	add	sp, #16
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b4c:	e028      	b.n	8001ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 f82f 	bl	8001bb8 <I2C_IsAcknowledgeFailed>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d001      	beq.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e026      	b.n	8001bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b62:	f7ff fa01 	bl	8000f68 <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d302      	bcc.n	8001b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d113      	bne.n	8001ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2241      	movs	r2, #65	; 0x41
 8001b88:	2120      	movs	r1, #32
 8001b8a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2242      	movs	r2, #66	; 0x42
 8001b90:	2100      	movs	r1, #0
 8001b92:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	2100      	movs	r1, #0
 8001b9a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e007      	b.n	8001bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d1cf      	bne.n	8001b4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b004      	add	sp, #16
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d164      	bne.n	8001c9c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	049b      	lsls	r3, r3, #18
 8001bdc:	401a      	ands	r2, r3
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	049b      	lsls	r3, r3, #18
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d02b      	beq.n	8001c3e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	01c9      	lsls	r1, r1, #7
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf8:	e021      	b.n	8001c3e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	d01e      	beq.n	8001c3e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c00:	f7ff f9b2 	bl	8000f68 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d302      	bcc.n	8001c16 <I2C_IsAcknowledgeFailed+0x5e>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d113      	bne.n	8001c3e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2241      	movs	r2, #65	; 0x41
 8001c26:	2120      	movs	r1, #32
 8001c28:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2242      	movs	r2, #66	; 0x42
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2240      	movs	r2, #64	; 0x40
 8001c36:	2100      	movs	r1, #0
 8001c38:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e02f      	b.n	8001c9e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2220      	movs	r2, #32
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d1d6      	bne.n	8001bfa <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2210      	movs	r2, #16
 8001c52:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff fece 	bl	8001a00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <I2C_IsAcknowledgeFailed+0xf0>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	2204      	movs	r2, #4
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2241      	movs	r2, #65	; 0x41
 8001c84:	2120      	movs	r1, #32
 8001c86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2242      	movs	r2, #66	; 0x42
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	2100      	movs	r1, #0
 8001c96:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	fe00e800 	.word	0xfe00e800

08001cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	0008      	movs	r0, r1
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	240a      	movs	r4, #10
 8001cbc:	193b      	adds	r3, r7, r4
 8001cbe:	1c02      	adds	r2, r0, #0
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	2009      	movs	r0, #9
 8001cc4:	183b      	adds	r3, r7, r0
 8001cc6:	1c0a      	adds	r2, r1, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	0d51      	lsrs	r1, r2, #21
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	00d2      	lsls	r2, r2, #3
 8001cd8:	400a      	ands	r2, r1
 8001cda:	490e      	ldr	r1, [pc, #56]	; (8001d14 <I2C_TransferConfig+0x68>)
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	43d2      	mvns	r2, r2
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	193b      	adds	r3, r7, r4
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	059b      	lsls	r3, r3, #22
 8001cea:	0d9a      	lsrs	r2, r3, #22
 8001cec:	183b      	adds	r3, r7, r0
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	0418      	lsls	r0, r3, #16
 8001cf2:	23ff      	movs	r3, #255	; 0xff
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	4003      	ands	r3, r0
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b005      	add	sp, #20
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	03ff63ff 	.word	0x03ff63ff

08001d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2241      	movs	r2, #65	; 0x41
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d138      	bne.n	8001da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2240      	movs	r2, #64	; 0x40
 8001d32:	5c9b      	ldrb	r3, [r3, r2]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e032      	b.n	8001da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	2101      	movs	r1, #1
 8001d42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2241      	movs	r2, #65	; 0x41
 8001d48:	2124      	movs	r1, #36	; 0x24
 8001d4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2101      	movs	r1, #1
 8001d58:	438a      	bics	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4911      	ldr	r1, [pc, #68]	; (8001dac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6819      	ldr	r1, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2101      	movs	r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2241      	movs	r2, #65	; 0x41
 8001d90:	2120      	movs	r1, #32
 8001d92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001da0:	2302      	movs	r3, #2
  }
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b002      	add	sp, #8
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	ffffefff 	.word	0xffffefff

08001db0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2241      	movs	r2, #65	; 0x41
 8001dbe:	5c9b      	ldrb	r3, [r3, r2]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d139      	bne.n	8001e3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	5c9b      	ldrb	r3, [r3, r2]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e033      	b.n	8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2240      	movs	r2, #64	; 0x40
 8001dd8:	2101      	movs	r1, #1
 8001dda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2241      	movs	r2, #65	; 0x41
 8001de0:	2124      	movs	r1, #36	; 0x24
 8001de2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2101      	movs	r1, #1
 8001df0:	438a      	bics	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2241      	movs	r2, #65	; 0x41
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2240      	movs	r2, #64	; 0x40
 8001e32:	2100      	movs	r1, #0
 8001e34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
  }
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b004      	add	sp, #16
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	fffff0ff 	.word	0xfffff0ff

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f000 fb76 	bl	8002548 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d100      	bne.n	8001e68 <HAL_RCC_OscConfig+0x20>
 8001e66:	e08e      	b.n	8001f86 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e68:	4bc5      	ldr	r3, [pc, #788]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d00e      	beq.n	8001e92 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e74:	4bc2      	ldr	r3, [pc, #776]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d117      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x68>
 8001e80:	4bbf      	ldr	r3, [pc, #764]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	23c0      	movs	r3, #192	; 0xc0
 8001e86:	025b      	lsls	r3, r3, #9
 8001e88:	401a      	ands	r2, r3
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d10e      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	4bbb      	ldr	r3, [pc, #748]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d100      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x58>
 8001e9e:	e071      	b.n	8001f84 <HAL_RCC_OscConfig+0x13c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d000      	beq.n	8001eaa <HAL_RCC_OscConfig+0x62>
 8001ea8:	e06c      	b.n	8001f84 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f000 fb4c 	bl	8002548 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x80>
 8001eb8:	4bb1      	ldr	r3, [pc, #708]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4bb0      	ldr	r3, [pc, #704]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	0249      	lsls	r1, r1, #9
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e02f      	b.n	8001f28 <HAL_RCC_OscConfig+0xe0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0xa2>
 8001ed0:	4bab      	ldr	r3, [pc, #684]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4baa      	ldr	r3, [pc, #680]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ed6:	49ab      	ldr	r1, [pc, #684]	; (8002184 <HAL_RCC_OscConfig+0x33c>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	4ba8      	ldr	r3, [pc, #672]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4ba7      	ldr	r3, [pc, #668]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ee2:	49a9      	ldr	r1, [pc, #676]	; (8002188 <HAL_RCC_OscConfig+0x340>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e01e      	b.n	8001f28 <HAL_RCC_OscConfig+0xe0>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d10e      	bne.n	8001f10 <HAL_RCC_OscConfig+0xc8>
 8001ef2:	4ba3      	ldr	r3, [pc, #652]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4ba2      	ldr	r3, [pc, #648]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ef8:	2180      	movs	r1, #128	; 0x80
 8001efa:	02c9      	lsls	r1, r1, #11
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	4b9f      	ldr	r3, [pc, #636]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b9e      	ldr	r3, [pc, #632]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0249      	lsls	r1, r1, #9
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xe0>
 8001f10:	4b9b      	ldr	r3, [pc, #620]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b9a      	ldr	r3, [pc, #616]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f16:	499b      	ldr	r1, [pc, #620]	; (8002184 <HAL_RCC_OscConfig+0x33c>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4b98      	ldr	r3, [pc, #608]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b97      	ldr	r3, [pc, #604]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f22:	4999      	ldr	r1, [pc, #612]	; (8002188 <HAL_RCC_OscConfig+0x340>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d014      	beq.n	8001f5a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f81a 	bl	8000f68 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3a:	f7ff f815 	bl	8000f68 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e2fd      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	029b      	lsls	r3, r3, #10
 8001f54:	4013      	ands	r3, r2
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0xf2>
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f805 	bl	8000f68 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff f800 	bl	8000f68 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e2e8      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b82      	ldr	r3, [pc, #520]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	029b      	lsls	r3, r3, #10
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x11c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCC_OscConfig+0x14a>
 8001f90:	e06c      	b.n	800206c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f92:	4b7b      	ldr	r3, [pc, #492]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	220c      	movs	r2, #12
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d00e      	beq.n	8001fba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f9c:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d11f      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1a0>
 8001fa8:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	23c0      	movs	r3, #192	; 0xc0
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b71      	ldr	r3, [pc, #452]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x188>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e2bb      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	22f8      	movs	r2, #248	; 0xf8
 8001fd6:	4393      	bics	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00da      	lsls	r2, r3, #3
 8001fe0:	4b67      	ldr	r3, [pc, #412]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e041      	b.n	800206c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d024      	beq.n	800203a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ffb4 	bl	8000f68 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7fe ffaf 	bl	8000f68 <HAL_GetTick>
 800200a:	0002      	movs	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e297      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2202      	movs	r2, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d0f1      	beq.n	8002006 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	22f8      	movs	r2, #248	; 0xf8
 8002028:	4393      	bics	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00da      	lsls	r2, r3, #3
 8002032:	4b53      	ldr	r3, [pc, #332]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e018      	b.n	800206c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b51      	ldr	r3, [pc, #324]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002040:	2101      	movs	r1, #1
 8002042:	438a      	bics	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe ff8f 	bl	8000f68 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002050:	f7fe ff8a 	bl	8000f68 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e272      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d1f1      	bne.n	8002050 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2208      	movs	r2, #8
 8002072:	4013      	ands	r3, r2
 8002074:	d036      	beq.n	80020e4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7fe ff6d 	bl	8000f68 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002094:	f7fe ff68 	bl	8000f68 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e250      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2202      	movs	r2, #2
 80020ac:	4013      	ands	r3, r2
 80020ae:	d0f1      	beq.n	8002094 <HAL_RCC_OscConfig+0x24c>
 80020b0:	e018      	b.n	80020e4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b2:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 80020b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	438a      	bics	r2, r1
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7fe ff53 	bl	8000f68 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c8:	f7fe ff4e 	bl	8000f68 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e236      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d1f1      	bne.n	80020c8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2204      	movs	r2, #4
 80020ea:	4013      	ands	r3, r2
 80020ec:	d100      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2a8>
 80020ee:	e0b5      	b.n	800225c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f0:	201f      	movs	r0, #31
 80020f2:	183b      	adds	r3, r7, r0
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	4013      	ands	r3, r2
 8002102:	d110      	bne.n	8002126 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0549      	lsls	r1, r1, #21
 800210e:	430a      	orrs	r2, r1
 8002110:	61da      	str	r2, [r3, #28]
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	055b      	lsls	r3, r3, #21
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002120:	183b      	adds	r3, r7, r0
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_OscConfig+0x344>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d11a      	bne.n	8002168 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_RCC_OscConfig+0x344>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_OscConfig+0x344>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0049      	lsls	r1, r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002140:	f7fe ff12 	bl	8000f68 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214a:	f7fe ff0d 	bl	8000f68 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b64      	cmp	r3, #100	; 0x64
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1f5      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x344>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10f      	bne.n	8002190 <HAL_RCC_OscConfig+0x348>
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <HAL_RCC_OscConfig+0x338>)
 8002176:	2101      	movs	r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	621a      	str	r2, [r3, #32]
 800217c:	e036      	b.n	80021ec <HAL_RCC_OscConfig+0x3a4>
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	fffeffff 	.word	0xfffeffff
 8002188:	fffbffff 	.word	0xfffbffff
 800218c:	40007000 	.word	0x40007000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x36a>
 8002198:	4bca      	ldr	r3, [pc, #808]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800219a:	6a1a      	ldr	r2, [r3, #32]
 800219c:	4bc9      	ldr	r3, [pc, #804]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800219e:	2101      	movs	r1, #1
 80021a0:	438a      	bics	r2, r1
 80021a2:	621a      	str	r2, [r3, #32]
 80021a4:	4bc7      	ldr	r3, [pc, #796]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4bc6      	ldr	r3, [pc, #792]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	2104      	movs	r1, #4
 80021ac:	438a      	bics	r2, r1
 80021ae:	621a      	str	r2, [r3, #32]
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x3a4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x38c>
 80021ba:	4bc2      	ldr	r3, [pc, #776]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	4bc1      	ldr	r3, [pc, #772]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021c0:	2104      	movs	r1, #4
 80021c2:	430a      	orrs	r2, r1
 80021c4:	621a      	str	r2, [r3, #32]
 80021c6:	4bbf      	ldr	r3, [pc, #764]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	6a1a      	ldr	r2, [r3, #32]
 80021ca:	4bbe      	ldr	r3, [pc, #760]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	430a      	orrs	r2, r1
 80021d0:	621a      	str	r2, [r3, #32]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0x3a4>
 80021d4:	4bbb      	ldr	r3, [pc, #748]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	4bba      	ldr	r3, [pc, #744]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	621a      	str	r2, [r3, #32]
 80021e0:	4bb8      	ldr	r3, [pc, #736]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	4bb7      	ldr	r3, [pc, #732]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80021e6:	2104      	movs	r1, #4
 80021e8:	438a      	bics	r2, r1
 80021ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d014      	beq.n	800221e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7fe feb8 	bl	8000f68 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe feb3 	bl	8000f68 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4aaf      	ldr	r2, [pc, #700]	; (80024c8 <HAL_RCC_OscConfig+0x680>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e19a      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	4bac      	ldr	r3, [pc, #688]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x3b6>
 800221c:	e013      	b.n	8002246 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7fe fea3 	bl	8000f68 <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002226:	e009      	b.n	800223c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002228:	f7fe fe9e 	bl	8000f68 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	4aa5      	ldr	r2, [pc, #660]	; (80024c8 <HAL_RCC_OscConfig+0x680>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e185      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	4ba1      	ldr	r3, [pc, #644]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002246:	231f      	movs	r3, #31
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002250:	4b9c      	ldr	r3, [pc, #624]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	4b9b      	ldr	r3, [pc, #620]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002256:	499d      	ldr	r1, [pc, #628]	; (80024cc <HAL_RCC_OscConfig+0x684>)
 8002258:	400a      	ands	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2210      	movs	r2, #16
 8002262:	4013      	ands	r3, r2
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d12a      	bne.n	80022c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800226e:	4b95      	ldr	r3, [pc, #596]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002272:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002274:	2104      	movs	r1, #4
 8002276:	430a      	orrs	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800227a:	4b92      	ldr	r3, [pc, #584]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800227c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800227e:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002280:	2101      	movs	r1, #1
 8002282:	430a      	orrs	r2, r1
 8002284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002286:	f7fe fe6f 	bl	8000f68 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002290:	f7fe fe6a 	bl	8000f68 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e152      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d0f1      	beq.n	8002290 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022ac:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	22f8      	movs	r2, #248	; 0xf8
 80022b2:	4393      	bics	r3, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	00da      	lsls	r2, r3, #3
 80022bc:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34
 80022c2:	e034      	b.n	800232e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	3305      	adds	r3, #5
 80022ca:	d111      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80022cc:	4b7d      	ldr	r3, [pc, #500]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d0:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022d2:	2104      	movs	r1, #4
 80022d4:	438a      	bics	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022d8:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	22f8      	movs	r2, #248	; 0xf8
 80022de:	4393      	bics	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	00da      	lsls	r2, r3, #3
 80022e8:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
 80022ee:	e01e      	b.n	800232e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022f0:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f4:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022f6:	2104      	movs	r1, #4
 80022f8:	430a      	orrs	r2, r1
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022fc:	4b71      	ldr	r3, [pc, #452]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002300:	4b70      	ldr	r3, [pc, #448]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7fe fe2e 	bl	8000f68 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002312:	f7fe fe29 	bl	8000f68 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e111      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002324:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d1f1      	bne.n	8002312 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2220      	movs	r2, #32
 8002334:	4013      	ands	r3, r2
 8002336:	d05c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002338:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	220c      	movs	r2, #12
 800233e:	4013      	ands	r3, r2
 8002340:	2b0c      	cmp	r3, #12
 8002342:	d00e      	beq.n	8002362 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002344:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	220c      	movs	r2, #12
 800234a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800234c:	2b08      	cmp	r3, #8
 800234e:	d114      	bne.n	800237a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002350:	4b5c      	ldr	r3, [pc, #368]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	23c0      	movs	r3, #192	; 0xc0
 8002356:	025b      	lsls	r3, r3, #9
 8002358:	401a      	ands	r2, r3
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	429a      	cmp	r2, r3
 8002360:	d10b      	bne.n	800237a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002362:	4b58      	ldr	r3, [pc, #352]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	4013      	ands	r3, r2
 800236c:	d040      	beq.n	80023f0 <HAL_RCC_OscConfig+0x5a8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d03c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0e6      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01b      	beq.n	80023ba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002386:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	0249      	lsls	r1, r1, #9
 800238c:	430a      	orrs	r2, r1
 800238e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fdea 	bl	8000f68 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800239a:	f7fe fde5 	bl	8000f68 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0cd      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023ac:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	025b      	lsls	r3, r3, #9
 80023b4:	4013      	ands	r3, r2
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x552>
 80023b8:	e01b      	b.n	80023f2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80023ba:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023c0:	4943      	ldr	r1, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0x688>)
 80023c2:	400a      	ands	r2, r1
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fdcf 	bl	8000f68 <HAL_GetTick>
 80023ca:	0003      	movs	r3, r0
 80023cc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023d0:	f7fe fdca 	bl	8000f68 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0b2      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	4013      	ands	r3, r2
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x588>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023f0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d100      	bne.n	80023fc <HAL_RCC_OscConfig+0x5b4>
 80023fa:	e0a4      	b.n	8002546 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fc:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	220c      	movs	r2, #12
 8002402:	4013      	ands	r3, r2
 8002404:	2b08      	cmp	r3, #8
 8002406:	d100      	bne.n	800240a <HAL_RCC_OscConfig+0x5c2>
 8002408:	e078      	b.n	80024fc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	2b02      	cmp	r3, #2
 8002410:	d14c      	bne.n	80024ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002418:	492e      	ldr	r1, [pc, #184]	; (80024d4 <HAL_RCC_OscConfig+0x68c>)
 800241a:	400a      	ands	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7fe fda3 	bl	8000f68 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe fd9e 	bl	8000f68 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e086      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	4013      	ands	r3, r2
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002446:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	220f      	movs	r2, #15
 800244c:	4393      	bics	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002456:	430a      	orrs	r2, r1
 8002458:	62da      	str	r2, [r3, #44]	; 0x2c
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_RCC_OscConfig+0x690>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	431a      	orrs	r2, r3
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002470:	430a      	orrs	r2, r1
 8002472:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0449      	lsls	r1, r1, #17
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7fe fd71 	bl	8000f68 <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fd6c 	bl	8000f68 <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e054      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	049b      	lsls	r3, r3, #18
 80024a6:	4013      	ands	r3, r2
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x644>
 80024aa:	e04c      	b.n	8002546 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <HAL_RCC_OscConfig+0x68c>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fd56 	bl	8000f68 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e015      	b.n	80024ee <HAL_RCC_OscConfig+0x6a6>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	40021000 	.word	0x40021000
 80024c8:	00001388 	.word	0x00001388
 80024cc:	efffffff 	.word	0xefffffff
 80024d0:	fffeffff 	.word	0xfffeffff
 80024d4:	feffffff 	.word	0xfeffffff
 80024d8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fd44 	bl	8000f68 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e02c      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_RCC_OscConfig+0x708>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	4013      	ands	r3, r2
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x694>
 80024fa:	e024      	b.n	8002546 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e01f      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_OscConfig+0x708>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_OscConfig+0x708>)
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	23c0      	movs	r3, #192	; 0xc0
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	429a      	cmp	r2, r3
 8002522:	d10e      	bne.n	8002542 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	220f      	movs	r2, #15
 8002528:	401a      	ands	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	23f0      	movs	r3, #240	; 0xf0
 8002536:	039b      	lsls	r3, r3, #14
 8002538:	401a      	ands	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b008      	add	sp, #32
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0bf      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002568:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d911      	bls.n	800259a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2201      	movs	r2, #1
 800257c:	4393      	bics	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002588:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	4013      	ands	r3, r2
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0a6      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2202      	movs	r2, #2
 80025a0:	4013      	ands	r3, r2
 80025a2:	d015      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2204      	movs	r2, #4
 80025aa:	4013      	ands	r3, r2
 80025ac:	d006      	beq.n	80025bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025ae:	4b51      	ldr	r3, [pc, #324]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4b50      	ldr	r3, [pc, #320]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025b4:	21e0      	movs	r1, #224	; 0xe0
 80025b6:	00c9      	lsls	r1, r1, #3
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b4d      	ldr	r3, [pc, #308]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	22f0      	movs	r2, #240	; 0xf0
 80025c2:	4393      	bics	r3, r2
 80025c4:	0019      	movs	r1, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	d04c      	beq.n	8002674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	4013      	ands	r3, r2
 80025ec:	d120      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07a      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	049b      	lsls	r3, r3, #18
 8002602:	4013      	ands	r3, r2
 8002604:	d114      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06e      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	4013      	ands	r3, r2
 800261c:	d108      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e062      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e05b      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2203      	movs	r2, #3
 8002636:	4393      	bics	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002644:	f7fe fc90 	bl	8000f68 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264c:	e009      	b.n	8002662 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7fe fc8b 	bl	8000f68 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_RCC_ClockConfig+0x1a4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e042      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	220c      	movs	r2, #12
 8002668:	401a      	ands	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1ec      	bne.n	800264e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d211      	bcs.n	80026a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4393      	bics	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_RCC_ClockConfig+0x19c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e020      	b.n	80026e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_RCC_ClockConfig+0x1a8>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026c4:	f000 f820 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c8:	0001      	movs	r1, r0
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1a0>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	220f      	movs	r2, #15
 80026d2:	4013      	ands	r3, r2
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_RCC_ClockConfig+0x1ac>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	000a      	movs	r2, r1
 80026da:	40da      	lsrs	r2, r3
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x1b0>)
 80026de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7fe fbfb 	bl	8000edc <HAL_InitTick>
  
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b004      	add	sp, #16
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	00001388 	.word	0x00001388
 80026fc:	fffff8ff 	.word	0xfffff8ff
 8002700:	08005a04 	.word	0x08005a04
 8002704:	20000010 	.word	0x20000010

08002708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b08f      	sub	sp, #60	; 0x3c
 800270c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800270e:	2314      	movs	r3, #20
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xec>)
 8002714:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002716:	c313      	stmia	r3!, {r0, r1, r4}
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002720:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002722:	c313      	stmia	r3!, {r0, r1, r4}
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272c:	2300      	movs	r3, #0
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800273c:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <HAL_RCC_GetSysClockFreq+0xf4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	220c      	movs	r2, #12
 8002746:	4013      	ands	r3, r2
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d047      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0xd4>
 800274c:	d849      	bhi.n	80027e2 <HAL_RCC_GetSysClockFreq+0xda>
 800274e:	2b04      	cmp	r3, #4
 8002750:	d002      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x50>
 8002752:	2b08      	cmp	r3, #8
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x56>
 8002756:	e044      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_RCC_GetSysClockFreq+0xf8>)
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800275c:	e044      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	220f      	movs	r2, #15
 8002764:	4013      	ands	r3, r2
 8002766:	2214      	movs	r2, #20
 8002768:	18ba      	adds	r2, r7, r2
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	220f      	movs	r2, #15
 8002774:	4013      	ands	r3, r2
 8002776:	1d3a      	adds	r2, r7, #4
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800277c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277e:	23c0      	movs	r3, #192	; 0xc0
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	401a      	ands	r2, r3
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	429a      	cmp	r2, r3
 800278a:	d109      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800278c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800278e:	481c      	ldr	r0, [pc, #112]	; (8002800 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002790:	f7fd fcc4 	bl	800011c <__udivsi3>
 8002794:	0003      	movs	r3, r0
 8002796:	001a      	movs	r2, r3
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	4353      	muls	r3, r2
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
 800279e:	e01a      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80027a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a2:	23c0      	movs	r3, #192	; 0xc0
 80027a4:	025b      	lsls	r3, r3, #9
 80027a6:	401a      	ands	r2, r3
 80027a8:	23c0      	movs	r3, #192	; 0xc0
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d109      	bne.n	80027c4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b2:	4814      	ldr	r0, [pc, #80]	; (8002804 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027b4:	f7fd fcb2 	bl	800011c <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	001a      	movs	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	4353      	muls	r3, r2
 80027c0:	637b      	str	r3, [r7, #52]	; 0x34
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c6:	480e      	ldr	r0, [pc, #56]	; (8002800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c8:	f7fd fca8 	bl	800011c <__udivsi3>
 80027cc:	0003      	movs	r3, r0
 80027ce:	001a      	movs	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	4353      	muls	r3, r2
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027da:	e005      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e0:	e002      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b00f      	add	sp, #60	; 0x3c
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	0800393c 	.word	0x0800393c
 80027f8:	0800394c 	.word	0x0800394c
 80027fc:	40021000 	.word	0x40021000
 8002800:	007a1200 	.word	0x007a1200
 8002804:	02dc6c00 	.word	0x02dc6c00

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	025b      	lsls	r3, r3, #9
 8002820:	4013      	ands	r3, r2
 8002822:	d100      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002824:	e08e      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2017      	movs	r0, #23
 8002828:	183b      	adds	r3, r7, r0
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b6e      	ldr	r3, [pc, #440]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	055b      	lsls	r3, r3, #21
 8002836:	4013      	ands	r3, r2
 8002838:	d110      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	4b6b      	ldr	r3, [pc, #428]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	0549      	lsls	r1, r1, #21
 8002844:	430a      	orrs	r2, r1
 8002846:	61da      	str	r2, [r3, #28]
 8002848:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	055b      	lsls	r3, r3, #21
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	183b      	adds	r3, r7, r0
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	4b63      	ldr	r3, [pc, #396]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4013      	ands	r3, r2
 8002866:	d11a      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002868:	4b60      	ldr	r3, [pc, #384]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	0049      	lsls	r1, r1, #1
 8002872:	430a      	orrs	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fb77 	bl	8000f68 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	e008      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe fb72 	bl	8000f68 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e0a6      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	4b56      	ldr	r3, [pc, #344]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4013      	ands	r3, r2
 800289c:	d0f0      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800289e:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028a0:	6a1a      	ldr	r2, [r3, #32]
 80028a2:	23c0      	movs	r3, #192	; 0xc0
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d034      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	23c0      	movs	r3, #192	; 0xc0
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d02c      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c0:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a4a      	ldr	r2, [pc, #296]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0249      	lsls	r1, r1, #9
 80028d4:	430a      	orrs	r2, r1
 80028d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d8:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028de:	4945      	ldr	r1, [pc, #276]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028e4:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	4013      	ands	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fb39 	bl	8000f68 <HAL_GetTick>
 80028f6:	0003      	movs	r3, r0
 80028f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	e009      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fb34 	bl	8000f68 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e067      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d0f0      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291a:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800292a:	430a      	orrs	r2, r1
 800292c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800292e:	2317      	movs	r3, #23
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800293e:	492f      	ldr	r1, [pc, #188]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002940:	400a      	ands	r2, r1
 8002942:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2201      	movs	r2, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	2203      	movs	r2, #3
 8002954:	4393      	bics	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295e:	430a      	orrs	r2, r1
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4a23      	ldr	r2, [pc, #140]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002972:	4013      	ands	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800297c:	430a      	orrs	r2, r1
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2220      	movs	r2, #32
 8002986:	4013      	ands	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	2210      	movs	r2, #16
 8002990:	4393      	bics	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800299a:	430a      	orrs	r2, r1
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	029b      	lsls	r3, r3, #10
 80029a6:	4013      	ands	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	4393      	bics	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4013      	ands	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	4393      	bics	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029da:	430a      	orrs	r2, r1
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b006      	add	sp, #24
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	fffffcff 	.word	0xfffffcff
 80029f4:	fffeffff 	.word	0xfffeffff
 80029f8:	00001388 	.word	0x00001388
 80029fc:	efffffff 	.word	0xefffffff
 8002a00:	fffcffff 	.word	0xfffcffff

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e042      	b.n	8002a9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	223d      	movs	r2, #61	; 0x3d
 8002a1a:	5c9b      	ldrb	r3, [r3, r2]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223c      	movs	r2, #60	; 0x3c
 8002a26:	2100      	movs	r1, #0
 8002a28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7fe f9a3 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	223d      	movs	r2, #61	; 0x3d
 8002a36:	2102      	movs	r1, #2
 8002a38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	0019      	movs	r1, r3
 8002a44:	0010      	movs	r0, r2
 8002a46:	f000 f94b 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2246      	movs	r2, #70	; 0x46
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	223e      	movs	r2, #62	; 0x3e
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	223f      	movs	r2, #63	; 0x3f
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2241      	movs	r2, #65	; 0x41
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2242      	movs	r2, #66	; 0x42
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2243      	movs	r2, #67	; 0x43
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2244      	movs	r2, #68	; 0x44
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2245      	movs	r2, #69	; 0x45
 8002a8e:	2101      	movs	r1, #1
 8002a90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	223d      	movs	r2, #61	; 0x3d
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	223d      	movs	r2, #61	; 0x3d
 8002ab0:	5c9b      	ldrb	r3, [r3, r2]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d001      	beq.n	8002abc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e033      	b.n	8002b24 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	223d      	movs	r2, #61	; 0x3d
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_TIM_Base_Start+0x88>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00f      	beq.n	8002aee <HAL_TIM_Base_Start+0x4a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	05db      	lsls	r3, r3, #23
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d009      	beq.n	8002aee <HAL_TIM_Base_Start+0x4a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_TIM_Base_Start+0x8c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d004      	beq.n	8002aee <HAL_TIM_Base_Start+0x4a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <HAL_TIM_Base_Start+0x90>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d111      	bne.n	8002b12 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2207      	movs	r2, #7
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d010      	beq.n	8002b22 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	e007      	b.n	8002b22 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40014000 	.word	0x40014000

08002b38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	230f      	movs	r3, #15
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223c      	movs	r2, #60	; 0x3c
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_ConfigClockSource+0x20>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0bc      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x19a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223c      	movs	r2, #60	; 0x3c
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	223d      	movs	r2, #61	; 0x3d
 8002b64:	2102      	movs	r1, #2
 8002b66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2277      	movs	r2, #119	; 0x77
 8002b74:	4393      	bics	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	0192      	lsls	r2, r2, #6
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d040      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0xde>
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	0192      	lsls	r2, r2, #6
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d900      	bls.n	8002b9e <HAL_TIM_ConfigClockSource+0x66>
 8002b9c:	e088      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	0152      	lsls	r2, r2, #5
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d100      	bne.n	8002ba8 <HAL_TIM_ConfigClockSource+0x70>
 8002ba6:	e088      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x182>
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	0152      	lsls	r2, r2, #5
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d900      	bls.n	8002bb2 <HAL_TIM_ConfigClockSource+0x7a>
 8002bb0:	e07e      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002bb2:	2b70      	cmp	r3, #112	; 0x70
 8002bb4:	d018      	beq.n	8002be8 <HAL_TIM_ConfigClockSource+0xb0>
 8002bb6:	d900      	bls.n	8002bba <HAL_TIM_ConfigClockSource+0x82>
 8002bb8:	e07a      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002bba:	2b60      	cmp	r3, #96	; 0x60
 8002bbc:	d04f      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0x126>
 8002bbe:	d900      	bls.n	8002bc2 <HAL_TIM_ConfigClockSource+0x8a>
 8002bc0:	e076      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002bc2:	2b50      	cmp	r3, #80	; 0x50
 8002bc4:	d03b      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x106>
 8002bc6:	d900      	bls.n	8002bca <HAL_TIM_ConfigClockSource+0x92>
 8002bc8:	e072      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d057      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0x146>
 8002bce:	d900      	bls.n	8002bd2 <HAL_TIM_ConfigClockSource+0x9a>
 8002bd0:	e06e      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002bd2:	2b30      	cmp	r3, #48	; 0x30
 8002bd4:	d063      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x166>
 8002bd6:	d86b      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d060      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x166>
 8002bdc:	d868      	bhi.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d05d      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x166>
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d05b      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0x166>
 8002be6:	e063      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f000 f96c 	bl	8002ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2277      	movs	r2, #119	; 0x77
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	609a      	str	r2, [r3, #8]
      break;
 8002c14:	e052      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6899      	ldr	r1, [r3, #8]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f000 f955 	bl	8002ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2180      	movs	r1, #128	; 0x80
 8002c36:	01c9      	lsls	r1, r1, #7
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
      break;
 8002c3c:	e03e      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	f000 f8c8 	bl	8002de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2150      	movs	r1, #80	; 0x50
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f922 	bl	8002ea0 <TIM_ITRx_SetConfig>
      break;
 8002c5c:	e02e      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	f000 f8e6 	bl	8002e3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2160      	movs	r1, #96	; 0x60
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f912 	bl	8002ea0 <TIM_ITRx_SetConfig>
      break;
 8002c7c:	e01e      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	f000 f8a8 	bl	8002de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 f902 	bl	8002ea0 <TIM_ITRx_SetConfig>
      break;
 8002c9c:	e00e      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f000 f8f9 	bl	8002ea0 <TIM_ITRx_SetConfig>
      break;
 8002cae:	e005      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
      break;
 8002cb8:	e000      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223d      	movs	r2, #61	; 0x3d
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	223c      	movs	r2, #60	; 0x3c
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5499      	strb	r1, [r3, r2]

  return status;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	781b      	ldrb	r3, [r3, #0]
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	ffff00ff 	.word	0xffff00ff

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <TIM_Base_SetConfig+0xe4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d008      	beq.n	8002d0a <TIM_Base_SetConfig+0x2a>
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	05db      	lsls	r3, r3, #23
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x2a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a30      	ldr	r2, [pc, #192]	; (8002dc8 <TIM_Base_SetConfig+0xe8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2270      	movs	r2, #112	; 0x70
 8002d0e:	4393      	bics	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <TIM_Base_SetConfig+0xe4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <TIM_Base_SetConfig+0x76>
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	05db      	lsls	r3, r3, #23
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d013      	beq.n	8002d56 <TIM_Base_SetConfig+0x76>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <TIM_Base_SetConfig+0xe8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00f      	beq.n	8002d56 <TIM_Base_SetConfig+0x76>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <TIM_Base_SetConfig+0xec>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <TIM_Base_SetConfig+0x76>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <TIM_Base_SetConfig+0xf0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <TIM_Base_SetConfig+0x76>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <TIM_Base_SetConfig+0xf4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <TIM_Base_SetConfig+0x76>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <TIM_Base_SetConfig+0xf8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d108      	bne.n	8002d68 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <TIM_Base_SetConfig+0xfc>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	001a      	movs	r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <TIM_Base_SetConfig+0xe4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00b      	beq.n	8002dae <TIM_Base_SetConfig+0xce>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <TIM_Base_SetConfig+0xf0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <TIM_Base_SetConfig+0xce>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <TIM_Base_SetConfig+0xf4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d003      	beq.n	8002dae <TIM_Base_SetConfig+0xce>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <TIM_Base_SetConfig+0xf8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d103      	bne.n	8002db6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	615a      	str	r2, [r3, #20]
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b004      	add	sp, #16
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40002000 	.word	0x40002000
 8002dd0:	40014000 	.word	0x40014000
 8002dd4:	40014400 	.word	0x40014400
 8002dd8:	40014800 	.word	0x40014800
 8002ddc:	fffffcff 	.word	0xfffffcff

08002de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4393      	bics	r3, r2
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	22f0      	movs	r2, #240	; 0xf0
 8002e0a:	4393      	bics	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	4393      	bics	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	621a      	str	r2, [r3, #32]
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b006      	add	sp, #24
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4393      	bics	r3, r2
 8002e50:	001a      	movs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <TIM_TI2_ConfigInputStage+0x60>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	031b      	lsls	r3, r3, #12
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	22a0      	movs	r2, #160	; 0xa0
 8002e78:	4393      	bics	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b006      	add	sp, #24
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	ffff0fff 	.word	0xffff0fff

08002ea0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2270      	movs	r2, #112	; 0x70
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	609a      	str	r2, [r3, #8]
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <TIM_ETR_SetConfig+0x3c>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	021a      	lsls	r2, r3, #8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b006      	add	sp, #24
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	ffff00ff 	.word	0xffff00ff

08002f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	223c      	movs	r2, #60	; 0x3c
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e047      	b.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	223c      	movs	r2, #60	; 0x3c
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	223d      	movs	r2, #61	; 0x3d
 8002f38:	2102      	movs	r1, #2
 8002f3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2270      	movs	r2, #112	; 0x70
 8002f50:	4393      	bics	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00f      	beq.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	05db      	lsls	r3, r3, #23
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d009      	beq.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a10      	ldr	r2, [pc, #64]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10c      	bne.n	8002faa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	4393      	bics	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223d      	movs	r2, #61	; 0x3d
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	223c      	movs	r2, #60	; 0x3c
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b004      	add	sp, #16
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40014000 	.word	0x40014000

08002fd0 <__errno>:
 8002fd0:	4b01      	ldr	r3, [pc, #4]	; (8002fd8 <__errno+0x8>)
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	4770      	bx	lr
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	2000001c 	.word	0x2000001c

08002fdc <__libc_init_array>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	2600      	movs	r6, #0
 8002fe0:	4d0c      	ldr	r5, [pc, #48]	; (8003014 <__libc_init_array+0x38>)
 8002fe2:	4c0d      	ldr	r4, [pc, #52]	; (8003018 <__libc_init_array+0x3c>)
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	42a6      	cmp	r6, r4
 8002fea:	d109      	bne.n	8003000 <__libc_init_array+0x24>
 8002fec:	2600      	movs	r6, #0
 8002fee:	f000 fc8b 	bl	8003908 <_init>
 8002ff2:	4d0a      	ldr	r5, [pc, #40]	; (800301c <__libc_init_array+0x40>)
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <__libc_init_array+0x44>)
 8002ff6:	1b64      	subs	r4, r4, r5
 8002ff8:	10a4      	asrs	r4, r4, #2
 8002ffa:	42a6      	cmp	r6, r4
 8002ffc:	d105      	bne.n	800300a <__libc_init_array+0x2e>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	00b3      	lsls	r3, r6, #2
 8003002:	58eb      	ldr	r3, [r5, r3]
 8003004:	4798      	blx	r3
 8003006:	3601      	adds	r6, #1
 8003008:	e7ee      	b.n	8002fe8 <__libc_init_array+0xc>
 800300a:	00b3      	lsls	r3, r6, #2
 800300c:	58eb      	ldr	r3, [r5, r3]
 800300e:	4798      	blx	r3
 8003010:	3601      	adds	r6, #1
 8003012:	e7f2      	b.n	8002ffa <__libc_init_array+0x1e>
 8003014:	08005a48 	.word	0x08005a48
 8003018:	08005a48 	.word	0x08005a48
 800301c:	08005a48 	.word	0x08005a48
 8003020:	08005a4c 	.word	0x08005a4c

08003024 <memset>:
 8003024:	0003      	movs	r3, r0
 8003026:	1882      	adds	r2, r0, r2
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	7019      	strb	r1, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <siprintf>:
 8003034:	b40e      	push	{r1, r2, r3}
 8003036:	b500      	push	{lr}
 8003038:	490b      	ldr	r1, [pc, #44]	; (8003068 <siprintf+0x34>)
 800303a:	b09c      	sub	sp, #112	; 0x70
 800303c:	ab1d      	add	r3, sp, #116	; 0x74
 800303e:	9002      	str	r0, [sp, #8]
 8003040:	9006      	str	r0, [sp, #24]
 8003042:	9107      	str	r1, [sp, #28]
 8003044:	9104      	str	r1, [sp, #16]
 8003046:	4809      	ldr	r0, [pc, #36]	; (800306c <siprintf+0x38>)
 8003048:	4909      	ldr	r1, [pc, #36]	; (8003070 <siprintf+0x3c>)
 800304a:	cb04      	ldmia	r3!, {r2}
 800304c:	9105      	str	r1, [sp, #20]
 800304e:	6800      	ldr	r0, [r0, #0]
 8003050:	a902      	add	r1, sp, #8
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	f000 f870 	bl	8003138 <_svfiprintf_r>
 8003058:	2300      	movs	r3, #0
 800305a:	9a02      	ldr	r2, [sp, #8]
 800305c:	7013      	strb	r3, [r2, #0]
 800305e:	b01c      	add	sp, #112	; 0x70
 8003060:	bc08      	pop	{r3}
 8003062:	b003      	add	sp, #12
 8003064:	4718      	bx	r3
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	7fffffff 	.word	0x7fffffff
 800306c:	2000001c 	.word	0x2000001c
 8003070:	ffff0208 	.word	0xffff0208

08003074 <__ssputs_r>:
 8003074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003076:	688e      	ldr	r6, [r1, #8]
 8003078:	b085      	sub	sp, #20
 800307a:	0007      	movs	r7, r0
 800307c:	000c      	movs	r4, r1
 800307e:	9203      	str	r2, [sp, #12]
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	429e      	cmp	r6, r3
 8003084:	d83c      	bhi.n	8003100 <__ssputs_r+0x8c>
 8003086:	2390      	movs	r3, #144	; 0x90
 8003088:	898a      	ldrh	r2, [r1, #12]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	421a      	tst	r2, r3
 800308e:	d034      	beq.n	80030fa <__ssputs_r+0x86>
 8003090:	6909      	ldr	r1, [r1, #16]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	6960      	ldr	r0, [r4, #20]
 8003096:	1a5b      	subs	r3, r3, r1
 8003098:	9302      	str	r3, [sp, #8]
 800309a:	2303      	movs	r3, #3
 800309c:	4343      	muls	r3, r0
 800309e:	0fdd      	lsrs	r5, r3, #31
 80030a0:	18ed      	adds	r5, r5, r3
 80030a2:	9b01      	ldr	r3, [sp, #4]
 80030a4:	9802      	ldr	r0, [sp, #8]
 80030a6:	3301      	adds	r3, #1
 80030a8:	181b      	adds	r3, r3, r0
 80030aa:	106d      	asrs	r5, r5, #1
 80030ac:	42ab      	cmp	r3, r5
 80030ae:	d900      	bls.n	80030b2 <__ssputs_r+0x3e>
 80030b0:	001d      	movs	r5, r3
 80030b2:	0553      	lsls	r3, r2, #21
 80030b4:	d532      	bpl.n	800311c <__ssputs_r+0xa8>
 80030b6:	0029      	movs	r1, r5
 80030b8:	0038      	movs	r0, r7
 80030ba:	f000 fb53 	bl	8003764 <_malloc_r>
 80030be:	1e06      	subs	r6, r0, #0
 80030c0:	d109      	bne.n	80030d6 <__ssputs_r+0x62>
 80030c2:	230c      	movs	r3, #12
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	2340      	movs	r3, #64	; 0x40
 80030c8:	2001      	movs	r0, #1
 80030ca:	89a2      	ldrh	r2, [r4, #12]
 80030cc:	4240      	negs	r0, r0
 80030ce:	4313      	orrs	r3, r2
 80030d0:	81a3      	strh	r3, [r4, #12]
 80030d2:	b005      	add	sp, #20
 80030d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d6:	9a02      	ldr	r2, [sp, #8]
 80030d8:	6921      	ldr	r1, [r4, #16]
 80030da:	f000 faba 	bl	8003652 <memcpy>
 80030de:	89a3      	ldrh	r3, [r4, #12]
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <__ssputs_r+0xc0>)
 80030e2:	401a      	ands	r2, r3
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	4313      	orrs	r3, r2
 80030e8:	81a3      	strh	r3, [r4, #12]
 80030ea:	9b02      	ldr	r3, [sp, #8]
 80030ec:	6126      	str	r6, [r4, #16]
 80030ee:	18f6      	adds	r6, r6, r3
 80030f0:	6026      	str	r6, [r4, #0]
 80030f2:	6165      	str	r5, [r4, #20]
 80030f4:	9e01      	ldr	r6, [sp, #4]
 80030f6:	1aed      	subs	r5, r5, r3
 80030f8:	60a5      	str	r5, [r4, #8]
 80030fa:	9b01      	ldr	r3, [sp, #4]
 80030fc:	429e      	cmp	r6, r3
 80030fe:	d900      	bls.n	8003102 <__ssputs_r+0x8e>
 8003100:	9e01      	ldr	r6, [sp, #4]
 8003102:	0032      	movs	r2, r6
 8003104:	9903      	ldr	r1, [sp, #12]
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	f000 faac 	bl	8003664 <memmove>
 800310c:	68a3      	ldr	r3, [r4, #8]
 800310e:	2000      	movs	r0, #0
 8003110:	1b9b      	subs	r3, r3, r6
 8003112:	60a3      	str	r3, [r4, #8]
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	199e      	adds	r6, r3, r6
 8003118:	6026      	str	r6, [r4, #0]
 800311a:	e7da      	b.n	80030d2 <__ssputs_r+0x5e>
 800311c:	002a      	movs	r2, r5
 800311e:	0038      	movs	r0, r7
 8003120:	f000 fb96 	bl	8003850 <_realloc_r>
 8003124:	1e06      	subs	r6, r0, #0
 8003126:	d1e0      	bne.n	80030ea <__ssputs_r+0x76>
 8003128:	0038      	movs	r0, r7
 800312a:	6921      	ldr	r1, [r4, #16]
 800312c:	f000 faae 	bl	800368c <_free_r>
 8003130:	e7c7      	b.n	80030c2 <__ssputs_r+0x4e>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	fffffb7f 	.word	0xfffffb7f

08003138 <_svfiprintf_r>:
 8003138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800313a:	b0a1      	sub	sp, #132	; 0x84
 800313c:	9003      	str	r0, [sp, #12]
 800313e:	001d      	movs	r5, r3
 8003140:	898b      	ldrh	r3, [r1, #12]
 8003142:	000f      	movs	r7, r1
 8003144:	0016      	movs	r6, r2
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	d511      	bpl.n	800316e <_svfiprintf_r+0x36>
 800314a:	690b      	ldr	r3, [r1, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10e      	bne.n	800316e <_svfiprintf_r+0x36>
 8003150:	2140      	movs	r1, #64	; 0x40
 8003152:	f000 fb07 	bl	8003764 <_malloc_r>
 8003156:	6038      	str	r0, [r7, #0]
 8003158:	6138      	str	r0, [r7, #16]
 800315a:	2800      	cmp	r0, #0
 800315c:	d105      	bne.n	800316a <_svfiprintf_r+0x32>
 800315e:	230c      	movs	r3, #12
 8003160:	9a03      	ldr	r2, [sp, #12]
 8003162:	3801      	subs	r0, #1
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	b021      	add	sp, #132	; 0x84
 8003168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	2300      	movs	r3, #0
 8003170:	ac08      	add	r4, sp, #32
 8003172:	6163      	str	r3, [r4, #20]
 8003174:	3320      	adds	r3, #32
 8003176:	7663      	strb	r3, [r4, #25]
 8003178:	3310      	adds	r3, #16
 800317a:	76a3      	strb	r3, [r4, #26]
 800317c:	9507      	str	r5, [sp, #28]
 800317e:	0035      	movs	r5, r6
 8003180:	782b      	ldrb	r3, [r5, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <_svfiprintf_r+0x52>
 8003186:	2b25      	cmp	r3, #37	; 0x25
 8003188:	d147      	bne.n	800321a <_svfiprintf_r+0xe2>
 800318a:	1bab      	subs	r3, r5, r6
 800318c:	9305      	str	r3, [sp, #20]
 800318e:	42b5      	cmp	r5, r6
 8003190:	d00c      	beq.n	80031ac <_svfiprintf_r+0x74>
 8003192:	0032      	movs	r2, r6
 8003194:	0039      	movs	r1, r7
 8003196:	9803      	ldr	r0, [sp, #12]
 8003198:	f7ff ff6c 	bl	8003074 <__ssputs_r>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d100      	bne.n	80031a2 <_svfiprintf_r+0x6a>
 80031a0:	e0ae      	b.n	8003300 <_svfiprintf_r+0x1c8>
 80031a2:	6962      	ldr	r2, [r4, #20]
 80031a4:	9b05      	ldr	r3, [sp, #20]
 80031a6:	4694      	mov	ip, r2
 80031a8:	4463      	add	r3, ip
 80031aa:	6163      	str	r3, [r4, #20]
 80031ac:	782b      	ldrb	r3, [r5, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d100      	bne.n	80031b4 <_svfiprintf_r+0x7c>
 80031b2:	e0a5      	b.n	8003300 <_svfiprintf_r+0x1c8>
 80031b4:	2201      	movs	r2, #1
 80031b6:	2300      	movs	r3, #0
 80031b8:	4252      	negs	r2, r2
 80031ba:	6062      	str	r2, [r4, #4]
 80031bc:	a904      	add	r1, sp, #16
 80031be:	3254      	adds	r2, #84	; 0x54
 80031c0:	1852      	adds	r2, r2, r1
 80031c2:	1c6e      	adds	r6, r5, #1
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	60e3      	str	r3, [r4, #12]
 80031c8:	60a3      	str	r3, [r4, #8]
 80031ca:	7013      	strb	r3, [r2, #0]
 80031cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80031ce:	2205      	movs	r2, #5
 80031d0:	7831      	ldrb	r1, [r6, #0]
 80031d2:	4854      	ldr	r0, [pc, #336]	; (8003324 <_svfiprintf_r+0x1ec>)
 80031d4:	f000 fa32 	bl	800363c <memchr>
 80031d8:	1c75      	adds	r5, r6, #1
 80031da:	2800      	cmp	r0, #0
 80031dc:	d11f      	bne.n	800321e <_svfiprintf_r+0xe6>
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	06d3      	lsls	r3, r2, #27
 80031e2:	d504      	bpl.n	80031ee <_svfiprintf_r+0xb6>
 80031e4:	2353      	movs	r3, #83	; 0x53
 80031e6:	a904      	add	r1, sp, #16
 80031e8:	185b      	adds	r3, r3, r1
 80031ea:	2120      	movs	r1, #32
 80031ec:	7019      	strb	r1, [r3, #0]
 80031ee:	0713      	lsls	r3, r2, #28
 80031f0:	d504      	bpl.n	80031fc <_svfiprintf_r+0xc4>
 80031f2:	2353      	movs	r3, #83	; 0x53
 80031f4:	a904      	add	r1, sp, #16
 80031f6:	185b      	adds	r3, r3, r1
 80031f8:	212b      	movs	r1, #43	; 0x2b
 80031fa:	7019      	strb	r1, [r3, #0]
 80031fc:	7833      	ldrb	r3, [r6, #0]
 80031fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003200:	d016      	beq.n	8003230 <_svfiprintf_r+0xf8>
 8003202:	0035      	movs	r5, r6
 8003204:	2100      	movs	r1, #0
 8003206:	200a      	movs	r0, #10
 8003208:	68e3      	ldr	r3, [r4, #12]
 800320a:	782a      	ldrb	r2, [r5, #0]
 800320c:	1c6e      	adds	r6, r5, #1
 800320e:	3a30      	subs	r2, #48	; 0x30
 8003210:	2a09      	cmp	r2, #9
 8003212:	d94e      	bls.n	80032b2 <_svfiprintf_r+0x17a>
 8003214:	2900      	cmp	r1, #0
 8003216:	d111      	bne.n	800323c <_svfiprintf_r+0x104>
 8003218:	e017      	b.n	800324a <_svfiprintf_r+0x112>
 800321a:	3501      	adds	r5, #1
 800321c:	e7b0      	b.n	8003180 <_svfiprintf_r+0x48>
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <_svfiprintf_r+0x1ec>)
 8003220:	6822      	ldr	r2, [r4, #0]
 8003222:	1ac0      	subs	r0, r0, r3
 8003224:	2301      	movs	r3, #1
 8003226:	4083      	lsls	r3, r0
 8003228:	4313      	orrs	r3, r2
 800322a:	002e      	movs	r6, r5
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	e7ce      	b.n	80031ce <_svfiprintf_r+0x96>
 8003230:	9b07      	ldr	r3, [sp, #28]
 8003232:	1d19      	adds	r1, r3, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	9107      	str	r1, [sp, #28]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db01      	blt.n	8003240 <_svfiprintf_r+0x108>
 800323c:	930b      	str	r3, [sp, #44]	; 0x2c
 800323e:	e004      	b.n	800324a <_svfiprintf_r+0x112>
 8003240:	425b      	negs	r3, r3
 8003242:	60e3      	str	r3, [r4, #12]
 8003244:	2302      	movs	r3, #2
 8003246:	4313      	orrs	r3, r2
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	782b      	ldrb	r3, [r5, #0]
 800324c:	2b2e      	cmp	r3, #46	; 0x2e
 800324e:	d10a      	bne.n	8003266 <_svfiprintf_r+0x12e>
 8003250:	786b      	ldrb	r3, [r5, #1]
 8003252:	2b2a      	cmp	r3, #42	; 0x2a
 8003254:	d135      	bne.n	80032c2 <_svfiprintf_r+0x18a>
 8003256:	9b07      	ldr	r3, [sp, #28]
 8003258:	3502      	adds	r5, #2
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	9207      	str	r2, [sp, #28]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db2b      	blt.n	80032bc <_svfiprintf_r+0x184>
 8003264:	9309      	str	r3, [sp, #36]	; 0x24
 8003266:	4e30      	ldr	r6, [pc, #192]	; (8003328 <_svfiprintf_r+0x1f0>)
 8003268:	2203      	movs	r2, #3
 800326a:	0030      	movs	r0, r6
 800326c:	7829      	ldrb	r1, [r5, #0]
 800326e:	f000 f9e5 	bl	800363c <memchr>
 8003272:	2800      	cmp	r0, #0
 8003274:	d006      	beq.n	8003284 <_svfiprintf_r+0x14c>
 8003276:	2340      	movs	r3, #64	; 0x40
 8003278:	1b80      	subs	r0, r0, r6
 800327a:	4083      	lsls	r3, r0
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	3501      	adds	r5, #1
 8003280:	4313      	orrs	r3, r2
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	7829      	ldrb	r1, [r5, #0]
 8003286:	2206      	movs	r2, #6
 8003288:	4828      	ldr	r0, [pc, #160]	; (800332c <_svfiprintf_r+0x1f4>)
 800328a:	1c6e      	adds	r6, r5, #1
 800328c:	7621      	strb	r1, [r4, #24]
 800328e:	f000 f9d5 	bl	800363c <memchr>
 8003292:	2800      	cmp	r0, #0
 8003294:	d03c      	beq.n	8003310 <_svfiprintf_r+0x1d8>
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <_svfiprintf_r+0x1f8>)
 8003298:	2b00      	cmp	r3, #0
 800329a:	d125      	bne.n	80032e8 <_svfiprintf_r+0x1b0>
 800329c:	2207      	movs	r2, #7
 800329e:	9b07      	ldr	r3, [sp, #28]
 80032a0:	3307      	adds	r3, #7
 80032a2:	4393      	bics	r3, r2
 80032a4:	3308      	adds	r3, #8
 80032a6:	9307      	str	r3, [sp, #28]
 80032a8:	6963      	ldr	r3, [r4, #20]
 80032aa:	9a04      	ldr	r2, [sp, #16]
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	6163      	str	r3, [r4, #20]
 80032b0:	e765      	b.n	800317e <_svfiprintf_r+0x46>
 80032b2:	4343      	muls	r3, r0
 80032b4:	0035      	movs	r5, r6
 80032b6:	2101      	movs	r1, #1
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	e7a6      	b.n	800320a <_svfiprintf_r+0xd2>
 80032bc:	2301      	movs	r3, #1
 80032be:	425b      	negs	r3, r3
 80032c0:	e7d0      	b.n	8003264 <_svfiprintf_r+0x12c>
 80032c2:	2300      	movs	r3, #0
 80032c4:	200a      	movs	r0, #10
 80032c6:	001a      	movs	r2, r3
 80032c8:	3501      	adds	r5, #1
 80032ca:	6063      	str	r3, [r4, #4]
 80032cc:	7829      	ldrb	r1, [r5, #0]
 80032ce:	1c6e      	adds	r6, r5, #1
 80032d0:	3930      	subs	r1, #48	; 0x30
 80032d2:	2909      	cmp	r1, #9
 80032d4:	d903      	bls.n	80032de <_svfiprintf_r+0x1a6>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0c5      	beq.n	8003266 <_svfiprintf_r+0x12e>
 80032da:	9209      	str	r2, [sp, #36]	; 0x24
 80032dc:	e7c3      	b.n	8003266 <_svfiprintf_r+0x12e>
 80032de:	4342      	muls	r2, r0
 80032e0:	0035      	movs	r5, r6
 80032e2:	2301      	movs	r3, #1
 80032e4:	1852      	adds	r2, r2, r1
 80032e6:	e7f1      	b.n	80032cc <_svfiprintf_r+0x194>
 80032e8:	ab07      	add	r3, sp, #28
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	003a      	movs	r2, r7
 80032ee:	0021      	movs	r1, r4
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <_svfiprintf_r+0x1fc>)
 80032f2:	9803      	ldr	r0, [sp, #12]
 80032f4:	e000      	b.n	80032f8 <_svfiprintf_r+0x1c0>
 80032f6:	bf00      	nop
 80032f8:	9004      	str	r0, [sp, #16]
 80032fa:	9b04      	ldr	r3, [sp, #16]
 80032fc:	3301      	adds	r3, #1
 80032fe:	d1d3      	bne.n	80032a8 <_svfiprintf_r+0x170>
 8003300:	89bb      	ldrh	r3, [r7, #12]
 8003302:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003304:	065b      	lsls	r3, r3, #25
 8003306:	d400      	bmi.n	800330a <_svfiprintf_r+0x1d2>
 8003308:	e72d      	b.n	8003166 <_svfiprintf_r+0x2e>
 800330a:	2001      	movs	r0, #1
 800330c:	4240      	negs	r0, r0
 800330e:	e72a      	b.n	8003166 <_svfiprintf_r+0x2e>
 8003310:	ab07      	add	r3, sp, #28
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	003a      	movs	r2, r7
 8003316:	0021      	movs	r1, r4
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <_svfiprintf_r+0x1fc>)
 800331a:	9803      	ldr	r0, [sp, #12]
 800331c:	f000 f87c 	bl	8003418 <_printf_i>
 8003320:	e7ea      	b.n	80032f8 <_svfiprintf_r+0x1c0>
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	08005a14 	.word	0x08005a14
 8003328:	08005a1a 	.word	0x08005a1a
 800332c:	08005a1e 	.word	0x08005a1e
 8003330:	00000000 	.word	0x00000000
 8003334:	08003075 	.word	0x08003075

08003338 <_printf_common>:
 8003338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800333a:	0015      	movs	r5, r2
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	688a      	ldr	r2, [r1, #8]
 8003340:	690b      	ldr	r3, [r1, #16]
 8003342:	000c      	movs	r4, r1
 8003344:	9000      	str	r0, [sp, #0]
 8003346:	4293      	cmp	r3, r2
 8003348:	da00      	bge.n	800334c <_printf_common+0x14>
 800334a:	0013      	movs	r3, r2
 800334c:	0022      	movs	r2, r4
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	3243      	adds	r2, #67	; 0x43
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	2a00      	cmp	r2, #0
 8003356:	d001      	beq.n	800335c <_printf_common+0x24>
 8003358:	3301      	adds	r3, #1
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	069b      	lsls	r3, r3, #26
 8003360:	d502      	bpl.n	8003368 <_printf_common+0x30>
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	3302      	adds	r3, #2
 8003366:	602b      	str	r3, [r5, #0]
 8003368:	6822      	ldr	r2, [r4, #0]
 800336a:	2306      	movs	r3, #6
 800336c:	0017      	movs	r7, r2
 800336e:	401f      	ands	r7, r3
 8003370:	421a      	tst	r2, r3
 8003372:	d027      	beq.n	80033c4 <_printf_common+0x8c>
 8003374:	0023      	movs	r3, r4
 8003376:	3343      	adds	r3, #67	; 0x43
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	1e5a      	subs	r2, r3, #1
 800337c:	4193      	sbcs	r3, r2
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	0692      	lsls	r2, r2, #26
 8003382:	d430      	bmi.n	80033e6 <_printf_common+0xae>
 8003384:	0022      	movs	r2, r4
 8003386:	9901      	ldr	r1, [sp, #4]
 8003388:	9800      	ldr	r0, [sp, #0]
 800338a:	9e08      	ldr	r6, [sp, #32]
 800338c:	3243      	adds	r2, #67	; 0x43
 800338e:	47b0      	blx	r6
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d025      	beq.n	80033e0 <_printf_common+0xa8>
 8003394:	2306      	movs	r3, #6
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	682a      	ldr	r2, [r5, #0]
 800339a:	68e1      	ldr	r1, [r4, #12]
 800339c:	2500      	movs	r5, #0
 800339e:	4003      	ands	r3, r0
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d103      	bne.n	80033ac <_printf_common+0x74>
 80033a4:	1a8d      	subs	r5, r1, r2
 80033a6:	43eb      	mvns	r3, r5
 80033a8:	17db      	asrs	r3, r3, #31
 80033aa:	401d      	ands	r5, r3
 80033ac:	68a3      	ldr	r3, [r4, #8]
 80033ae:	6922      	ldr	r2, [r4, #16]
 80033b0:	4293      	cmp	r3, r2
 80033b2:	dd01      	ble.n	80033b8 <_printf_common+0x80>
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	18ed      	adds	r5, r5, r3
 80033b8:	2700      	movs	r7, #0
 80033ba:	42bd      	cmp	r5, r7
 80033bc:	d120      	bne.n	8003400 <_printf_common+0xc8>
 80033be:	2000      	movs	r0, #0
 80033c0:	e010      	b.n	80033e4 <_printf_common+0xac>
 80033c2:	3701      	adds	r7, #1
 80033c4:	68e3      	ldr	r3, [r4, #12]
 80033c6:	682a      	ldr	r2, [r5, #0]
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	42bb      	cmp	r3, r7
 80033cc:	ddd2      	ble.n	8003374 <_printf_common+0x3c>
 80033ce:	0022      	movs	r2, r4
 80033d0:	2301      	movs	r3, #1
 80033d2:	9901      	ldr	r1, [sp, #4]
 80033d4:	9800      	ldr	r0, [sp, #0]
 80033d6:	9e08      	ldr	r6, [sp, #32]
 80033d8:	3219      	adds	r2, #25
 80033da:	47b0      	blx	r6
 80033dc:	1c43      	adds	r3, r0, #1
 80033de:	d1f0      	bne.n	80033c2 <_printf_common+0x8a>
 80033e0:	2001      	movs	r0, #1
 80033e2:	4240      	negs	r0, r0
 80033e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033e6:	2030      	movs	r0, #48	; 0x30
 80033e8:	18e1      	adds	r1, r4, r3
 80033ea:	3143      	adds	r1, #67	; 0x43
 80033ec:	7008      	strb	r0, [r1, #0]
 80033ee:	0021      	movs	r1, r4
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	3145      	adds	r1, #69	; 0x45
 80033f4:	7809      	ldrb	r1, [r1, #0]
 80033f6:	18a2      	adds	r2, r4, r2
 80033f8:	3243      	adds	r2, #67	; 0x43
 80033fa:	3302      	adds	r3, #2
 80033fc:	7011      	strb	r1, [r2, #0]
 80033fe:	e7c1      	b.n	8003384 <_printf_common+0x4c>
 8003400:	0022      	movs	r2, r4
 8003402:	2301      	movs	r3, #1
 8003404:	9901      	ldr	r1, [sp, #4]
 8003406:	9800      	ldr	r0, [sp, #0]
 8003408:	9e08      	ldr	r6, [sp, #32]
 800340a:	321a      	adds	r2, #26
 800340c:	47b0      	blx	r6
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	d0e6      	beq.n	80033e0 <_printf_common+0xa8>
 8003412:	3701      	adds	r7, #1
 8003414:	e7d1      	b.n	80033ba <_printf_common+0x82>
	...

08003418 <_printf_i>:
 8003418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341a:	b08b      	sub	sp, #44	; 0x2c
 800341c:	9206      	str	r2, [sp, #24]
 800341e:	000a      	movs	r2, r1
 8003420:	3243      	adds	r2, #67	; 0x43
 8003422:	9307      	str	r3, [sp, #28]
 8003424:	9005      	str	r0, [sp, #20]
 8003426:	9204      	str	r2, [sp, #16]
 8003428:	7e0a      	ldrb	r2, [r1, #24]
 800342a:	000c      	movs	r4, r1
 800342c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800342e:	2a78      	cmp	r2, #120	; 0x78
 8003430:	d807      	bhi.n	8003442 <_printf_i+0x2a>
 8003432:	2a62      	cmp	r2, #98	; 0x62
 8003434:	d809      	bhi.n	800344a <_printf_i+0x32>
 8003436:	2a00      	cmp	r2, #0
 8003438:	d100      	bne.n	800343c <_printf_i+0x24>
 800343a:	e0c1      	b.n	80035c0 <_printf_i+0x1a8>
 800343c:	2a58      	cmp	r2, #88	; 0x58
 800343e:	d100      	bne.n	8003442 <_printf_i+0x2a>
 8003440:	e08c      	b.n	800355c <_printf_i+0x144>
 8003442:	0026      	movs	r6, r4
 8003444:	3642      	adds	r6, #66	; 0x42
 8003446:	7032      	strb	r2, [r6, #0]
 8003448:	e022      	b.n	8003490 <_printf_i+0x78>
 800344a:	0010      	movs	r0, r2
 800344c:	3863      	subs	r0, #99	; 0x63
 800344e:	2815      	cmp	r0, #21
 8003450:	d8f7      	bhi.n	8003442 <_printf_i+0x2a>
 8003452:	f7fc fe59 	bl	8000108 <__gnu_thumb1_case_shi>
 8003456:	0016      	.short	0x0016
 8003458:	fff6001f 	.word	0xfff6001f
 800345c:	fff6fff6 	.word	0xfff6fff6
 8003460:	001ffff6 	.word	0x001ffff6
 8003464:	fff6fff6 	.word	0xfff6fff6
 8003468:	fff6fff6 	.word	0xfff6fff6
 800346c:	003600a8 	.word	0x003600a8
 8003470:	fff6009a 	.word	0xfff6009a
 8003474:	00b9fff6 	.word	0x00b9fff6
 8003478:	0036fff6 	.word	0x0036fff6
 800347c:	fff6fff6 	.word	0xfff6fff6
 8003480:	009e      	.short	0x009e
 8003482:	0026      	movs	r6, r4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	3642      	adds	r6, #66	; 0x42
 8003488:	1d11      	adds	r1, r2, #4
 800348a:	6019      	str	r1, [r3, #0]
 800348c:	6813      	ldr	r3, [r2, #0]
 800348e:	7033      	strb	r3, [r6, #0]
 8003490:	2301      	movs	r3, #1
 8003492:	e0a7      	b.n	80035e4 <_printf_i+0x1cc>
 8003494:	6808      	ldr	r0, [r1, #0]
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	1d0a      	adds	r2, r1, #4
 800349a:	0605      	lsls	r5, r0, #24
 800349c:	d50b      	bpl.n	80034b6 <_printf_i+0x9e>
 800349e:	680d      	ldr	r5, [r1, #0]
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	da03      	bge.n	80034ae <_printf_i+0x96>
 80034a6:	232d      	movs	r3, #45	; 0x2d
 80034a8:	9a04      	ldr	r2, [sp, #16]
 80034aa:	426d      	negs	r5, r5
 80034ac:	7013      	strb	r3, [r2, #0]
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <_printf_i+0x21c>)
 80034b0:	270a      	movs	r7, #10
 80034b2:	9303      	str	r3, [sp, #12]
 80034b4:	e01b      	b.n	80034ee <_printf_i+0xd6>
 80034b6:	680d      	ldr	r5, [r1, #0]
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	0641      	lsls	r1, r0, #25
 80034bc:	d5f1      	bpl.n	80034a2 <_printf_i+0x8a>
 80034be:	b22d      	sxth	r5, r5
 80034c0:	e7ef      	b.n	80034a2 <_printf_i+0x8a>
 80034c2:	680d      	ldr	r5, [r1, #0]
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	1d08      	adds	r0, r1, #4
 80034c8:	6018      	str	r0, [r3, #0]
 80034ca:	062e      	lsls	r6, r5, #24
 80034cc:	d501      	bpl.n	80034d2 <_printf_i+0xba>
 80034ce:	680d      	ldr	r5, [r1, #0]
 80034d0:	e003      	b.n	80034da <_printf_i+0xc2>
 80034d2:	066d      	lsls	r5, r5, #25
 80034d4:	d5fb      	bpl.n	80034ce <_printf_i+0xb6>
 80034d6:	680d      	ldr	r5, [r1, #0]
 80034d8:	b2ad      	uxth	r5, r5
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <_printf_i+0x21c>)
 80034dc:	2708      	movs	r7, #8
 80034de:	9303      	str	r3, [sp, #12]
 80034e0:	2a6f      	cmp	r2, #111	; 0x6f
 80034e2:	d000      	beq.n	80034e6 <_printf_i+0xce>
 80034e4:	3702      	adds	r7, #2
 80034e6:	0023      	movs	r3, r4
 80034e8:	2200      	movs	r2, #0
 80034ea:	3343      	adds	r3, #67	; 0x43
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	6863      	ldr	r3, [r4, #4]
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	db03      	blt.n	80034fe <_printf_i+0xe6>
 80034f6:	2204      	movs	r2, #4
 80034f8:	6821      	ldr	r1, [r4, #0]
 80034fa:	4391      	bics	r1, r2
 80034fc:	6021      	str	r1, [r4, #0]
 80034fe:	2d00      	cmp	r5, #0
 8003500:	d102      	bne.n	8003508 <_printf_i+0xf0>
 8003502:	9e04      	ldr	r6, [sp, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <_printf_i+0x10a>
 8003508:	9e04      	ldr	r6, [sp, #16]
 800350a:	0028      	movs	r0, r5
 800350c:	0039      	movs	r1, r7
 800350e:	f7fc fe8b 	bl	8000228 <__aeabi_uidivmod>
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	3e01      	subs	r6, #1
 8003516:	5c5b      	ldrb	r3, [r3, r1]
 8003518:	7033      	strb	r3, [r6, #0]
 800351a:	002b      	movs	r3, r5
 800351c:	0005      	movs	r5, r0
 800351e:	429f      	cmp	r7, r3
 8003520:	d9f3      	bls.n	800350a <_printf_i+0xf2>
 8003522:	2f08      	cmp	r7, #8
 8003524:	d109      	bne.n	800353a <_printf_i+0x122>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	07db      	lsls	r3, r3, #31
 800352a:	d506      	bpl.n	800353a <_printf_i+0x122>
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	6922      	ldr	r2, [r4, #16]
 8003530:	4293      	cmp	r3, r2
 8003532:	dc02      	bgt.n	800353a <_printf_i+0x122>
 8003534:	2330      	movs	r3, #48	; 0x30
 8003536:	3e01      	subs	r6, #1
 8003538:	7033      	strb	r3, [r6, #0]
 800353a:	9b04      	ldr	r3, [sp, #16]
 800353c:	1b9b      	subs	r3, r3, r6
 800353e:	6123      	str	r3, [r4, #16]
 8003540:	9b07      	ldr	r3, [sp, #28]
 8003542:	0021      	movs	r1, r4
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	9805      	ldr	r0, [sp, #20]
 8003548:	9b06      	ldr	r3, [sp, #24]
 800354a:	aa09      	add	r2, sp, #36	; 0x24
 800354c:	f7ff fef4 	bl	8003338 <_printf_common>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d14c      	bne.n	80035ee <_printf_i+0x1d6>
 8003554:	2001      	movs	r0, #1
 8003556:	4240      	negs	r0, r0
 8003558:	b00b      	add	sp, #44	; 0x2c
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355c:	3145      	adds	r1, #69	; 0x45
 800355e:	700a      	strb	r2, [r1, #0]
 8003560:	4a34      	ldr	r2, [pc, #208]	; (8003634 <_printf_i+0x21c>)
 8003562:	9203      	str	r2, [sp, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	6821      	ldr	r1, [r4, #0]
 8003568:	ca20      	ldmia	r2!, {r5}
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	0608      	lsls	r0, r1, #24
 800356e:	d516      	bpl.n	800359e <_printf_i+0x186>
 8003570:	07cb      	lsls	r3, r1, #31
 8003572:	d502      	bpl.n	800357a <_printf_i+0x162>
 8003574:	2320      	movs	r3, #32
 8003576:	4319      	orrs	r1, r3
 8003578:	6021      	str	r1, [r4, #0]
 800357a:	2710      	movs	r7, #16
 800357c:	2d00      	cmp	r5, #0
 800357e:	d1b2      	bne.n	80034e6 <_printf_i+0xce>
 8003580:	2320      	movs	r3, #32
 8003582:	6822      	ldr	r2, [r4, #0]
 8003584:	439a      	bics	r2, r3
 8003586:	6022      	str	r2, [r4, #0]
 8003588:	e7ad      	b.n	80034e6 <_printf_i+0xce>
 800358a:	2220      	movs	r2, #32
 800358c:	6809      	ldr	r1, [r1, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	6022      	str	r2, [r4, #0]
 8003592:	0022      	movs	r2, r4
 8003594:	2178      	movs	r1, #120	; 0x78
 8003596:	3245      	adds	r2, #69	; 0x45
 8003598:	7011      	strb	r1, [r2, #0]
 800359a:	4a27      	ldr	r2, [pc, #156]	; (8003638 <_printf_i+0x220>)
 800359c:	e7e1      	b.n	8003562 <_printf_i+0x14a>
 800359e:	0648      	lsls	r0, r1, #25
 80035a0:	d5e6      	bpl.n	8003570 <_printf_i+0x158>
 80035a2:	b2ad      	uxth	r5, r5
 80035a4:	e7e4      	b.n	8003570 <_printf_i+0x158>
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	680d      	ldr	r5, [r1, #0]
 80035aa:	1d10      	adds	r0, r2, #4
 80035ac:	6949      	ldr	r1, [r1, #20]
 80035ae:	6018      	str	r0, [r3, #0]
 80035b0:	6813      	ldr	r3, [r2, #0]
 80035b2:	062e      	lsls	r6, r5, #24
 80035b4:	d501      	bpl.n	80035ba <_printf_i+0x1a2>
 80035b6:	6019      	str	r1, [r3, #0]
 80035b8:	e002      	b.n	80035c0 <_printf_i+0x1a8>
 80035ba:	066d      	lsls	r5, r5, #25
 80035bc:	d5fb      	bpl.n	80035b6 <_printf_i+0x19e>
 80035be:	8019      	strh	r1, [r3, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9e04      	ldr	r6, [sp, #16]
 80035c4:	6123      	str	r3, [r4, #16]
 80035c6:	e7bb      	b.n	8003540 <_printf_i+0x128>
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	1d11      	adds	r1, r2, #4
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	6816      	ldr	r6, [r2, #0]
 80035d0:	2100      	movs	r1, #0
 80035d2:	0030      	movs	r0, r6
 80035d4:	6862      	ldr	r2, [r4, #4]
 80035d6:	f000 f831 	bl	800363c <memchr>
 80035da:	2800      	cmp	r0, #0
 80035dc:	d001      	beq.n	80035e2 <_printf_i+0x1ca>
 80035de:	1b80      	subs	r0, r0, r6
 80035e0:	6060      	str	r0, [r4, #4]
 80035e2:	6863      	ldr	r3, [r4, #4]
 80035e4:	6123      	str	r3, [r4, #16]
 80035e6:	2300      	movs	r3, #0
 80035e8:	9a04      	ldr	r2, [sp, #16]
 80035ea:	7013      	strb	r3, [r2, #0]
 80035ec:	e7a8      	b.n	8003540 <_printf_i+0x128>
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	0032      	movs	r2, r6
 80035f2:	9906      	ldr	r1, [sp, #24]
 80035f4:	9805      	ldr	r0, [sp, #20]
 80035f6:	9d07      	ldr	r5, [sp, #28]
 80035f8:	47a8      	blx	r5
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	d0aa      	beq.n	8003554 <_printf_i+0x13c>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	079b      	lsls	r3, r3, #30
 8003602:	d415      	bmi.n	8003630 <_printf_i+0x218>
 8003604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003606:	68e0      	ldr	r0, [r4, #12]
 8003608:	4298      	cmp	r0, r3
 800360a:	daa5      	bge.n	8003558 <_printf_i+0x140>
 800360c:	0018      	movs	r0, r3
 800360e:	e7a3      	b.n	8003558 <_printf_i+0x140>
 8003610:	0022      	movs	r2, r4
 8003612:	2301      	movs	r3, #1
 8003614:	9906      	ldr	r1, [sp, #24]
 8003616:	9805      	ldr	r0, [sp, #20]
 8003618:	9e07      	ldr	r6, [sp, #28]
 800361a:	3219      	adds	r2, #25
 800361c:	47b0      	blx	r6
 800361e:	1c43      	adds	r3, r0, #1
 8003620:	d098      	beq.n	8003554 <_printf_i+0x13c>
 8003622:	3501      	adds	r5, #1
 8003624:	68e3      	ldr	r3, [r4, #12]
 8003626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	42ab      	cmp	r3, r5
 800362c:	dcf0      	bgt.n	8003610 <_printf_i+0x1f8>
 800362e:	e7e9      	b.n	8003604 <_printf_i+0x1ec>
 8003630:	2500      	movs	r5, #0
 8003632:	e7f7      	b.n	8003624 <_printf_i+0x20c>
 8003634:	08005a25 	.word	0x08005a25
 8003638:	08005a36 	.word	0x08005a36

0800363c <memchr>:
 800363c:	b2c9      	uxtb	r1, r1
 800363e:	1882      	adds	r2, r0, r2
 8003640:	4290      	cmp	r0, r2
 8003642:	d101      	bne.n	8003648 <memchr+0xc>
 8003644:	2000      	movs	r0, #0
 8003646:	4770      	bx	lr
 8003648:	7803      	ldrb	r3, [r0, #0]
 800364a:	428b      	cmp	r3, r1
 800364c:	d0fb      	beq.n	8003646 <memchr+0xa>
 800364e:	3001      	adds	r0, #1
 8003650:	e7f6      	b.n	8003640 <memchr+0x4>

08003652 <memcpy>:
 8003652:	2300      	movs	r3, #0
 8003654:	b510      	push	{r4, lr}
 8003656:	429a      	cmp	r2, r3
 8003658:	d100      	bne.n	800365c <memcpy+0xa>
 800365a:	bd10      	pop	{r4, pc}
 800365c:	5ccc      	ldrb	r4, [r1, r3]
 800365e:	54c4      	strb	r4, [r0, r3]
 8003660:	3301      	adds	r3, #1
 8003662:	e7f8      	b.n	8003656 <memcpy+0x4>

08003664 <memmove>:
 8003664:	b510      	push	{r4, lr}
 8003666:	4288      	cmp	r0, r1
 8003668:	d902      	bls.n	8003670 <memmove+0xc>
 800366a:	188b      	adds	r3, r1, r2
 800366c:	4298      	cmp	r0, r3
 800366e:	d303      	bcc.n	8003678 <memmove+0x14>
 8003670:	2300      	movs	r3, #0
 8003672:	e007      	b.n	8003684 <memmove+0x20>
 8003674:	5c8b      	ldrb	r3, [r1, r2]
 8003676:	5483      	strb	r3, [r0, r2]
 8003678:	3a01      	subs	r2, #1
 800367a:	d2fb      	bcs.n	8003674 <memmove+0x10>
 800367c:	bd10      	pop	{r4, pc}
 800367e:	5ccc      	ldrb	r4, [r1, r3]
 8003680:	54c4      	strb	r4, [r0, r3]
 8003682:	3301      	adds	r3, #1
 8003684:	429a      	cmp	r2, r3
 8003686:	d1fa      	bne.n	800367e <memmove+0x1a>
 8003688:	e7f8      	b.n	800367c <memmove+0x18>
	...

0800368c <_free_r>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	0005      	movs	r5, r0
 8003690:	2900      	cmp	r1, #0
 8003692:	d010      	beq.n	80036b6 <_free_r+0x2a>
 8003694:	1f0c      	subs	r4, r1, #4
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	da00      	bge.n	800369e <_free_r+0x12>
 800369c:	18e4      	adds	r4, r4, r3
 800369e:	0028      	movs	r0, r5
 80036a0:	f000 f918 	bl	80038d4 <__malloc_lock>
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <_free_r+0x90>)
 80036a6:	6813      	ldr	r3, [r2, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <_free_r+0x2c>
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	6014      	str	r4, [r2, #0]
 80036b0:	0028      	movs	r0, r5
 80036b2:	f000 f917 	bl	80038e4 <__malloc_unlock>
 80036b6:	bd70      	pop	{r4, r5, r6, pc}
 80036b8:	42a3      	cmp	r3, r4
 80036ba:	d908      	bls.n	80036ce <_free_r+0x42>
 80036bc:	6821      	ldr	r1, [r4, #0]
 80036be:	1860      	adds	r0, r4, r1
 80036c0:	4283      	cmp	r3, r0
 80036c2:	d1f3      	bne.n	80036ac <_free_r+0x20>
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	1841      	adds	r1, r0, r1
 80036ca:	6021      	str	r1, [r4, #0]
 80036cc:	e7ee      	b.n	80036ac <_free_r+0x20>
 80036ce:	001a      	movs	r2, r3
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <_free_r+0x4e>
 80036d6:	42a3      	cmp	r3, r4
 80036d8:	d9f9      	bls.n	80036ce <_free_r+0x42>
 80036da:	6811      	ldr	r1, [r2, #0]
 80036dc:	1850      	adds	r0, r2, r1
 80036de:	42a0      	cmp	r0, r4
 80036e0:	d10b      	bne.n	80036fa <_free_r+0x6e>
 80036e2:	6820      	ldr	r0, [r4, #0]
 80036e4:	1809      	adds	r1, r1, r0
 80036e6:	1850      	adds	r0, r2, r1
 80036e8:	6011      	str	r1, [r2, #0]
 80036ea:	4283      	cmp	r3, r0
 80036ec:	d1e0      	bne.n	80036b0 <_free_r+0x24>
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1841      	adds	r1, r0, r1
 80036f4:	6011      	str	r1, [r2, #0]
 80036f6:	6053      	str	r3, [r2, #4]
 80036f8:	e7da      	b.n	80036b0 <_free_r+0x24>
 80036fa:	42a0      	cmp	r0, r4
 80036fc:	d902      	bls.n	8003704 <_free_r+0x78>
 80036fe:	230c      	movs	r3, #12
 8003700:	602b      	str	r3, [r5, #0]
 8003702:	e7d5      	b.n	80036b0 <_free_r+0x24>
 8003704:	6821      	ldr	r1, [r4, #0]
 8003706:	1860      	adds	r0, r4, r1
 8003708:	4283      	cmp	r3, r0
 800370a:	d103      	bne.n	8003714 <_free_r+0x88>
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	1841      	adds	r1, r0, r1
 8003712:	6021      	str	r1, [r4, #0]
 8003714:	6063      	str	r3, [r4, #4]
 8003716:	6054      	str	r4, [r2, #4]
 8003718:	e7ca      	b.n	80036b0 <_free_r+0x24>
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	2000055c 	.word	0x2000055c

08003720 <sbrk_aligned>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4e0f      	ldr	r6, [pc, #60]	; (8003760 <sbrk_aligned+0x40>)
 8003724:	000d      	movs	r5, r1
 8003726:	6831      	ldr	r1, [r6, #0]
 8003728:	0004      	movs	r4, r0
 800372a:	2900      	cmp	r1, #0
 800372c:	d102      	bne.n	8003734 <sbrk_aligned+0x14>
 800372e:	f000 f8bf 	bl	80038b0 <_sbrk_r>
 8003732:	6030      	str	r0, [r6, #0]
 8003734:	0029      	movs	r1, r5
 8003736:	0020      	movs	r0, r4
 8003738:	f000 f8ba 	bl	80038b0 <_sbrk_r>
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	d00a      	beq.n	8003756 <sbrk_aligned+0x36>
 8003740:	2303      	movs	r3, #3
 8003742:	1cc5      	adds	r5, r0, #3
 8003744:	439d      	bics	r5, r3
 8003746:	42a8      	cmp	r0, r5
 8003748:	d007      	beq.n	800375a <sbrk_aligned+0x3a>
 800374a:	1a29      	subs	r1, r5, r0
 800374c:	0020      	movs	r0, r4
 800374e:	f000 f8af 	bl	80038b0 <_sbrk_r>
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	d101      	bne.n	800375a <sbrk_aligned+0x3a>
 8003756:	2501      	movs	r5, #1
 8003758:	426d      	negs	r5, r5
 800375a:	0028      	movs	r0, r5
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	20000560 	.word	0x20000560

08003764 <_malloc_r>:
 8003764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003766:	2203      	movs	r2, #3
 8003768:	1ccb      	adds	r3, r1, #3
 800376a:	4393      	bics	r3, r2
 800376c:	3308      	adds	r3, #8
 800376e:	0006      	movs	r6, r0
 8003770:	001f      	movs	r7, r3
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d232      	bcs.n	80037dc <_malloc_r+0x78>
 8003776:	270c      	movs	r7, #12
 8003778:	42b9      	cmp	r1, r7
 800377a:	d831      	bhi.n	80037e0 <_malloc_r+0x7c>
 800377c:	0030      	movs	r0, r6
 800377e:	f000 f8a9 	bl	80038d4 <__malloc_lock>
 8003782:	4d32      	ldr	r5, [pc, #200]	; (800384c <_malloc_r+0xe8>)
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	001c      	movs	r4, r3
 8003788:	2c00      	cmp	r4, #0
 800378a:	d12e      	bne.n	80037ea <_malloc_r+0x86>
 800378c:	0039      	movs	r1, r7
 800378e:	0030      	movs	r0, r6
 8003790:	f7ff ffc6 	bl	8003720 <sbrk_aligned>
 8003794:	0004      	movs	r4, r0
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	d11e      	bne.n	80037d8 <_malloc_r+0x74>
 800379a:	682c      	ldr	r4, [r5, #0]
 800379c:	0025      	movs	r5, r4
 800379e:	2d00      	cmp	r5, #0
 80037a0:	d14a      	bne.n	8003838 <_malloc_r+0xd4>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	0029      	movs	r1, r5
 80037a6:	18e3      	adds	r3, r4, r3
 80037a8:	0030      	movs	r0, r6
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	f000 f880 	bl	80038b0 <_sbrk_r>
 80037b0:	9b01      	ldr	r3, [sp, #4]
 80037b2:	4283      	cmp	r3, r0
 80037b4:	d143      	bne.n	800383e <_malloc_r+0xda>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	3703      	adds	r7, #3
 80037ba:	1aff      	subs	r7, r7, r3
 80037bc:	2303      	movs	r3, #3
 80037be:	439f      	bics	r7, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	2f0c      	cmp	r7, #12
 80037c4:	d200      	bcs.n	80037c8 <_malloc_r+0x64>
 80037c6:	270c      	movs	r7, #12
 80037c8:	0039      	movs	r1, r7
 80037ca:	0030      	movs	r0, r6
 80037cc:	f7ff ffa8 	bl	8003720 <sbrk_aligned>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d034      	beq.n	800383e <_malloc_r+0xda>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	19df      	adds	r7, r3, r7
 80037d8:	6027      	str	r7, [r4, #0]
 80037da:	e013      	b.n	8003804 <_malloc_r+0xa0>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dacb      	bge.n	8003778 <_malloc_r+0x14>
 80037e0:	230c      	movs	r3, #12
 80037e2:	2500      	movs	r5, #0
 80037e4:	6033      	str	r3, [r6, #0]
 80037e6:	0028      	movs	r0, r5
 80037e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	1bd1      	subs	r1, r2, r7
 80037ee:	d420      	bmi.n	8003832 <_malloc_r+0xce>
 80037f0:	290b      	cmp	r1, #11
 80037f2:	d917      	bls.n	8003824 <_malloc_r+0xc0>
 80037f4:	19e2      	adds	r2, r4, r7
 80037f6:	6027      	str	r7, [r4, #0]
 80037f8:	42a3      	cmp	r3, r4
 80037fa:	d111      	bne.n	8003820 <_malloc_r+0xbc>
 80037fc:	602a      	str	r2, [r5, #0]
 80037fe:	6863      	ldr	r3, [r4, #4]
 8003800:	6011      	str	r1, [r2, #0]
 8003802:	6053      	str	r3, [r2, #4]
 8003804:	0030      	movs	r0, r6
 8003806:	0025      	movs	r5, r4
 8003808:	f000 f86c 	bl	80038e4 <__malloc_unlock>
 800380c:	2207      	movs	r2, #7
 800380e:	350b      	adds	r5, #11
 8003810:	1d23      	adds	r3, r4, #4
 8003812:	4395      	bics	r5, r2
 8003814:	1aea      	subs	r2, r5, r3
 8003816:	429d      	cmp	r5, r3
 8003818:	d0e5      	beq.n	80037e6 <_malloc_r+0x82>
 800381a:	1b5b      	subs	r3, r3, r5
 800381c:	50a3      	str	r3, [r4, r2]
 800381e:	e7e2      	b.n	80037e6 <_malloc_r+0x82>
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	e7ec      	b.n	80037fe <_malloc_r+0x9a>
 8003824:	6862      	ldr	r2, [r4, #4]
 8003826:	42a3      	cmp	r3, r4
 8003828:	d101      	bne.n	800382e <_malloc_r+0xca>
 800382a:	602a      	str	r2, [r5, #0]
 800382c:	e7ea      	b.n	8003804 <_malloc_r+0xa0>
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	e7e8      	b.n	8003804 <_malloc_r+0xa0>
 8003832:	0023      	movs	r3, r4
 8003834:	6864      	ldr	r4, [r4, #4]
 8003836:	e7a7      	b.n	8003788 <_malloc_r+0x24>
 8003838:	002c      	movs	r4, r5
 800383a:	686d      	ldr	r5, [r5, #4]
 800383c:	e7af      	b.n	800379e <_malloc_r+0x3a>
 800383e:	230c      	movs	r3, #12
 8003840:	0030      	movs	r0, r6
 8003842:	6033      	str	r3, [r6, #0]
 8003844:	f000 f84e 	bl	80038e4 <__malloc_unlock>
 8003848:	e7cd      	b.n	80037e6 <_malloc_r+0x82>
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	2000055c 	.word	0x2000055c

08003850 <_realloc_r>:
 8003850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003852:	0007      	movs	r7, r0
 8003854:	000e      	movs	r6, r1
 8003856:	0014      	movs	r4, r2
 8003858:	2900      	cmp	r1, #0
 800385a:	d105      	bne.n	8003868 <_realloc_r+0x18>
 800385c:	0011      	movs	r1, r2
 800385e:	f7ff ff81 	bl	8003764 <_malloc_r>
 8003862:	0005      	movs	r5, r0
 8003864:	0028      	movs	r0, r5
 8003866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003868:	2a00      	cmp	r2, #0
 800386a:	d103      	bne.n	8003874 <_realloc_r+0x24>
 800386c:	f7ff ff0e 	bl	800368c <_free_r>
 8003870:	0025      	movs	r5, r4
 8003872:	e7f7      	b.n	8003864 <_realloc_r+0x14>
 8003874:	f000 f83e 	bl	80038f4 <_malloc_usable_size_r>
 8003878:	9001      	str	r0, [sp, #4]
 800387a:	4284      	cmp	r4, r0
 800387c:	d803      	bhi.n	8003886 <_realloc_r+0x36>
 800387e:	0035      	movs	r5, r6
 8003880:	0843      	lsrs	r3, r0, #1
 8003882:	42a3      	cmp	r3, r4
 8003884:	d3ee      	bcc.n	8003864 <_realloc_r+0x14>
 8003886:	0021      	movs	r1, r4
 8003888:	0038      	movs	r0, r7
 800388a:	f7ff ff6b 	bl	8003764 <_malloc_r>
 800388e:	1e05      	subs	r5, r0, #0
 8003890:	d0e8      	beq.n	8003864 <_realloc_r+0x14>
 8003892:	9b01      	ldr	r3, [sp, #4]
 8003894:	0022      	movs	r2, r4
 8003896:	429c      	cmp	r4, r3
 8003898:	d900      	bls.n	800389c <_realloc_r+0x4c>
 800389a:	001a      	movs	r2, r3
 800389c:	0031      	movs	r1, r6
 800389e:	0028      	movs	r0, r5
 80038a0:	f7ff fed7 	bl	8003652 <memcpy>
 80038a4:	0031      	movs	r1, r6
 80038a6:	0038      	movs	r0, r7
 80038a8:	f7ff fef0 	bl	800368c <_free_r>
 80038ac:	e7da      	b.n	8003864 <_realloc_r+0x14>
	...

080038b0 <_sbrk_r>:
 80038b0:	2300      	movs	r3, #0
 80038b2:	b570      	push	{r4, r5, r6, lr}
 80038b4:	4d06      	ldr	r5, [pc, #24]	; (80038d0 <_sbrk_r+0x20>)
 80038b6:	0004      	movs	r4, r0
 80038b8:	0008      	movs	r0, r1
 80038ba:	602b      	str	r3, [r5, #0]
 80038bc:	f7fd fa94 	bl	8000de8 <_sbrk>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d103      	bne.n	80038cc <_sbrk_r+0x1c>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d000      	beq.n	80038cc <_sbrk_r+0x1c>
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	bd70      	pop	{r4, r5, r6, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20000564 	.word	0x20000564

080038d4 <__malloc_lock>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4802      	ldr	r0, [pc, #8]	; (80038e0 <__malloc_lock+0xc>)
 80038d8:	f000 f814 	bl	8003904 <__retarget_lock_acquire_recursive>
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	20000568 	.word	0x20000568

080038e4 <__malloc_unlock>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	4802      	ldr	r0, [pc, #8]	; (80038f0 <__malloc_unlock+0xc>)
 80038e8:	f000 f80d 	bl	8003906 <__retarget_lock_release_recursive>
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	20000568 	.word	0x20000568

080038f4 <_malloc_usable_size_r>:
 80038f4:	1f0b      	subs	r3, r1, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	1f18      	subs	r0, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da01      	bge.n	8003902 <_malloc_usable_size_r+0xe>
 80038fe:	580b      	ldr	r3, [r1, r0]
 8003900:	18c0      	adds	r0, r0, r3
 8003902:	4770      	bx	lr

08003904 <__retarget_lock_acquire_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_release_recursive>:
 8003906:	4770      	bx	lr

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
